{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNpaVhYjtDtsOJYYFxpZmAE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "1edfc895068f4044816bbd4e1d0ac411": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_926c8571862d4042858e9201533b8edc",
              "IPY_MODEL_95f1142dd3934ce1adf7e970d10f4698",
              "IPY_MODEL_1910d965403446b19367ac8dce4a58d0"
            ],
            "layout": "IPY_MODEL_a4866bc6850249aca551bb698cf0d4ee"
          }
        },
        "926c8571862d4042858e9201533b8edc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_aec1976e81df4b39b347a911f71519c7",
            "placeholder": "​",
            "style": "IPY_MODEL_4cd9b0bb9ff34ec3896bc9c1921ef048",
            "value": "README.md: 100%"
          }
        },
        "95f1142dd3934ce1adf7e970d10f4698": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2c087f46f6564598a74d12f983af96aa",
            "max": 14183,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_003aeda165e44f44b682e0e30933bf26",
            "value": 14183
          }
        },
        "1910d965403446b19367ac8dce4a58d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0e116dd6fb9540e7a56aa3fa80958f5f",
            "placeholder": "​",
            "style": "IPY_MODEL_ae82b16ac40242c6bdfd8ee6ac3c9dca",
            "value": " 14.2k/14.2k [00:00&lt;00:00, 432kB/s]"
          }
        },
        "a4866bc6850249aca551bb698cf0d4ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "aec1976e81df4b39b347a911f71519c7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4cd9b0bb9ff34ec3896bc9c1921ef048": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2c087f46f6564598a74d12f983af96aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "003aeda165e44f44b682e0e30933bf26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0e116dd6fb9540e7a56aa3fa80958f5f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae82b16ac40242c6bdfd8ee6ac3c9dca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3ffd02506b8d43a3b10d9360defb36a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_0cd519e4f12d4062bafdade046f9cbab",
              "IPY_MODEL_972e9b8053e14ab5a05ef6d32867e61f",
              "IPY_MODEL_31ea74c684da4aad9f43664757983a94"
            ],
            "layout": "IPY_MODEL_5bc9c4a374964ee3a31734b3813a058e"
          }
        },
        "0cd519e4f12d4062bafdade046f9cbab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3aa363c9c57140e8bcb0b9847d84bf57",
            "placeholder": "​",
            "style": "IPY_MODEL_e17cb261e6d84280a67faf6598bbcb50",
            "value": "Epoch 1/10 [Training]: 100%"
          }
        },
        "972e9b8053e14ab5a05ef6d32867e61f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0572b5e2c075429e9448640f67ff2548",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0513be367abd4960b3bda72e187b3b4f",
            "value": 110
          }
        },
        "31ea74c684da4aad9f43664757983a94": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b0389cd6a4834224ab4e9d00beff8654",
            "placeholder": "​",
            "style": "IPY_MODEL_d70e352ba20348f8980ba9ce0f5a6a96",
            "value": " 110/110 [07:23&lt;00:00,  2.94s/it, loss=0.127]"
          }
        },
        "5bc9c4a374964ee3a31734b3813a058e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3aa363c9c57140e8bcb0b9847d84bf57": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e17cb261e6d84280a67faf6598bbcb50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0572b5e2c075429e9448640f67ff2548": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0513be367abd4960b3bda72e187b3b4f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b0389cd6a4834224ab4e9d00beff8654": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d70e352ba20348f8980ba9ce0f5a6a96": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6519f483b7624a4795cba4879cecff13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3a13c016ce69490da219ec99c4a9f28f",
              "IPY_MODEL_ac0cea6341d24aa5a203552ed97d6b05",
              "IPY_MODEL_1cf1bfca8c8d4963928b356bf5fcb4bf"
            ],
            "layout": "IPY_MODEL_fa49dad5224f41d5b9614d4a1615ce7e"
          }
        },
        "3a13c016ce69490da219ec99c4a9f28f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0fb7c11cc8ac4e5aa298a35af7fa5e32",
            "placeholder": "​",
            "style": "IPY_MODEL_afa5387f3c084e15bad06173184d2d05",
            "value": "Epoch 2/10 [Training]: 100%"
          }
        },
        "ac0cea6341d24aa5a203552ed97d6b05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_82bdc0fc9ad0475fa8c857a7e8595bde",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b209def040814c3e87424df7ae8161d1",
            "value": 110
          }
        },
        "1cf1bfca8c8d4963928b356bf5fcb4bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5b50561c21004a1c9c0ceb7ed67474c0",
            "placeholder": "​",
            "style": "IPY_MODEL_b49825696ec244279832412fef6777fe",
            "value": " 110/110 [07:02&lt;00:00,  3.05s/it, loss=0.0201]"
          }
        },
        "fa49dad5224f41d5b9614d4a1615ce7e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0fb7c11cc8ac4e5aa298a35af7fa5e32": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "afa5387f3c084e15bad06173184d2d05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "82bdc0fc9ad0475fa8c857a7e8595bde": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b209def040814c3e87424df7ae8161d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5b50561c21004a1c9c0ceb7ed67474c0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b49825696ec244279832412fef6777fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5abc0bcc2f7545dfb28975399b29b3bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_870935f745e34528a786613165811689",
              "IPY_MODEL_ca6c438d3e6146fd977394b08022e7ca",
              "IPY_MODEL_a5d0ae4e06374a45a8b7c2456a52caa3"
            ],
            "layout": "IPY_MODEL_aecc28a2e644427789d00e717a9be697"
          }
        },
        "870935f745e34528a786613165811689": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_81d1e94ea58849e5a9bf19d825f2c25e",
            "placeholder": "​",
            "style": "IPY_MODEL_eaa89b8368174541b9ee99738a5a6178",
            "value": "Epoch 3/10 [Training]: 100%"
          }
        },
        "ca6c438d3e6146fd977394b08022e7ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bd74b0699b84427ca7efc2ab41df9b19",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_48da76aee91e49d9bff7ed0981dd7709",
            "value": 110
          }
        },
        "a5d0ae4e06374a45a8b7c2456a52caa3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5ec312144d294f56b33f3014847f0f73",
            "placeholder": "​",
            "style": "IPY_MODEL_1cce2633cffc401aa0ccc7da68797590",
            "value": " 110/110 [07:44&lt;00:00,  3.02s/it, loss=0.016]"
          }
        },
        "aecc28a2e644427789d00e717a9be697": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "81d1e94ea58849e5a9bf19d825f2c25e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eaa89b8368174541b9ee99738a5a6178": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bd74b0699b84427ca7efc2ab41df9b19": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "48da76aee91e49d9bff7ed0981dd7709": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5ec312144d294f56b33f3014847f0f73": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1cce2633cffc401aa0ccc7da68797590": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "918384c31139463798ee8669d4d27f75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7ae9489e869142789ee0ea92c8089c80",
              "IPY_MODEL_d03f4a38893e47b1b05da6ddb05eea37",
              "IPY_MODEL_1affc5026a1d435988952aa6533d7411"
            ],
            "layout": "IPY_MODEL_0c9bfabb766b46ca951b82efcc5cf33b"
          }
        },
        "7ae9489e869142789ee0ea92c8089c80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1489c0ece2354ff08044c30d9b607db2",
            "placeholder": "​",
            "style": "IPY_MODEL_e5fd6d066e934148b9335ad80b28de8e",
            "value": "Epoch 4/10 [Training]: 100%"
          }
        },
        "d03f4a38893e47b1b05da6ddb05eea37": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_424eb6b4204446868635124dded70354",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1aa55b55e7bd4ee187b0c3a7e058d7cc",
            "value": 110
          }
        },
        "1affc5026a1d435988952aa6533d7411": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c0779ff164ce40a19afb48d2e90f3b37",
            "placeholder": "​",
            "style": "IPY_MODEL_10b75c2adc394108b2c5de2cdc6c22d4",
            "value": " 110/110 [07:24&lt;00:00,  2.96s/it, loss=0.00351]"
          }
        },
        "0c9bfabb766b46ca951b82efcc5cf33b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1489c0ece2354ff08044c30d9b607db2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5fd6d066e934148b9335ad80b28de8e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "424eb6b4204446868635124dded70354": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1aa55b55e7bd4ee187b0c3a7e058d7cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c0779ff164ce40a19afb48d2e90f3b37": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "10b75c2adc394108b2c5de2cdc6c22d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6435d1a92b504419aeea35793800e8f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8641b51c6f0f4746affae96c4879e661",
              "IPY_MODEL_5e4a0cd1bc024c0e92b470baa48c7a58",
              "IPY_MODEL_6b4d22614c3d4b7998c8d35b464a6f83"
            ],
            "layout": "IPY_MODEL_6980e825c66f4101b4cef16f56590de9"
          }
        },
        "8641b51c6f0f4746affae96c4879e661": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8d495b8aceee485ebfa2cca95bab3054",
            "placeholder": "​",
            "style": "IPY_MODEL_272a3f4337fc455db8593aa02ea6c4b4",
            "value": "Epoch 5/10 [Training]: 100%"
          }
        },
        "5e4a0cd1bc024c0e92b470baa48c7a58": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_776bcf5d7fb54ba4928ff05db91fa276",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8167deeb7b7248c2ad666c952df52b74",
            "value": 110
          }
        },
        "6b4d22614c3d4b7998c8d35b464a6f83": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f99a038ff0d140d3b20e467508802fa4",
            "placeholder": "​",
            "style": "IPY_MODEL_69128176c09c425db1c03f5e5ecc6d05",
            "value": " 110/110 [07:14&lt;00:00,  3.13s/it, loss=0.0196]"
          }
        },
        "6980e825c66f4101b4cef16f56590de9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8d495b8aceee485ebfa2cca95bab3054": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "272a3f4337fc455db8593aa02ea6c4b4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "776bcf5d7fb54ba4928ff05db91fa276": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8167deeb7b7248c2ad666c952df52b74": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f99a038ff0d140d3b20e467508802fa4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "69128176c09c425db1c03f5e5ecc6d05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1f877a5893a24f469fcad42387f8deec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ef9f1942c6e54034939a3718609c39fc",
              "IPY_MODEL_81a0fd0b4ff34d7db9ce04d90a4bda2d",
              "IPY_MODEL_765da528eb93445ca43cab220c0101d8"
            ],
            "layout": "IPY_MODEL_7e45f2fb224743e29d8e54415d161e49"
          }
        },
        "ef9f1942c6e54034939a3718609c39fc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f9de63d7121240cba85721b296d1c428",
            "placeholder": "​",
            "style": "IPY_MODEL_2af473ca64ad40e1ac938188ecc0493b",
            "value": "Epoch 6/10 [Training]: 100%"
          }
        },
        "81a0fd0b4ff34d7db9ce04d90a4bda2d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d44671b7f4c34da48a9728d94ca18290",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3f1512a538d14e8c81159c505e5eb37d",
            "value": 110
          }
        },
        "765da528eb93445ca43cab220c0101d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fe56a95daa89485ea3ebec0b5b3cdae4",
            "placeholder": "​",
            "style": "IPY_MODEL_b5aa0b1e7554411f8b90ca434d3fde6b",
            "value": " 110/110 [07:25&lt;00:00,  3.71s/it, loss=0.0183]"
          }
        },
        "7e45f2fb224743e29d8e54415d161e49": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f9de63d7121240cba85721b296d1c428": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2af473ca64ad40e1ac938188ecc0493b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d44671b7f4c34da48a9728d94ca18290": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f1512a538d14e8c81159c505e5eb37d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "fe56a95daa89485ea3ebec0b5b3cdae4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5aa0b1e7554411f8b90ca434d3fde6b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "438be37c79bc40a38db1d2948a5e1af6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_93c2243f4d494cd9ad687527565e4cb3",
              "IPY_MODEL_6ec53afc0e164a678c7f6e9ffad75057",
              "IPY_MODEL_e0a826557dab4bac8355765ab7f58c04"
            ],
            "layout": "IPY_MODEL_c9792b4e86ca465d854ab9c521eebabd"
          }
        },
        "93c2243f4d494cd9ad687527565e4cb3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_23de1ded28f741fc92a9984f08b55284",
            "placeholder": "​",
            "style": "IPY_MODEL_2b5aac1052e148288439cc2642924c1d",
            "value": "Epoch 7/10 [Training]: 100%"
          }
        },
        "6ec53afc0e164a678c7f6e9ffad75057": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_10df5d8958bb4a9bacc969dc8e7bdbcb",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fc039297b1c84c1bbe333acb9475652b",
            "value": 110
          }
        },
        "e0a826557dab4bac8355765ab7f58c04": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ebe867b1f3c1406fb484fd35eb369d03",
            "placeholder": "​",
            "style": "IPY_MODEL_84b39aa2337b45239e9060bdfe9da6c1",
            "value": " 110/110 [07:33&lt;00:00,  2.94s/it, loss=0.00764]"
          }
        },
        "c9792b4e86ca465d854ab9c521eebabd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "23de1ded28f741fc92a9984f08b55284": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b5aac1052e148288439cc2642924c1d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "10df5d8958bb4a9bacc969dc8e7bdbcb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fc039297b1c84c1bbe333acb9475652b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ebe867b1f3c1406fb484fd35eb369d03": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "84b39aa2337b45239e9060bdfe9da6c1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bd856f06cf574cde9f9d2aefc50af643": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_98300eeb1439414a9f45ed5fddf6b4da",
              "IPY_MODEL_0eca0a3143d848768678772f10a0bd9a",
              "IPY_MODEL_8a020e2a02f14d2dbde58559d70ee297"
            ],
            "layout": "IPY_MODEL_c0c1620b56cd4fd494d3f60c3b7ad8c5"
          }
        },
        "98300eeb1439414a9f45ed5fddf6b4da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_79679edc67634a62a94b16c2c22c5ecf",
            "placeholder": "​",
            "style": "IPY_MODEL_fe9a5acdbf0a456d9ae75c158367ce11",
            "value": "Epoch 8/10 [Training]: 100%"
          }
        },
        "0eca0a3143d848768678772f10a0bd9a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8d54bc0a3ad34e8db944660b7bbff527",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d0e63a95057446dd8f559c12829411c6",
            "value": 110
          }
        },
        "8a020e2a02f14d2dbde58559d70ee297": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0431b4564f0c42ba961b9a56d812e5f4",
            "placeholder": "​",
            "style": "IPY_MODEL_788f77a5e888405d988dd8e1c391ac92",
            "value": " 110/110 [07:18&lt;00:00,  3.69s/it, loss=0.00474]"
          }
        },
        "c0c1620b56cd4fd494d3f60c3b7ad8c5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79679edc67634a62a94b16c2c22c5ecf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fe9a5acdbf0a456d9ae75c158367ce11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8d54bc0a3ad34e8db944660b7bbff527": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d0e63a95057446dd8f559c12829411c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0431b4564f0c42ba961b9a56d812e5f4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "788f77a5e888405d988dd8e1c391ac92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d5b25d6b18464e16a1334f7fdc99dac1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_eb18baf7dfbe46fdb55a3e68238181ff",
              "IPY_MODEL_d799ff663d5e4e98900736d3cc4232a9",
              "IPY_MODEL_7b00785ffae1483aa4a6dd5fd557fed9"
            ],
            "layout": "IPY_MODEL_7ad8ed8fad8c44ca960876ef2a6e4cef"
          }
        },
        "eb18baf7dfbe46fdb55a3e68238181ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2cf13aff915d449b8c3459fcd9a522a0",
            "placeholder": "​",
            "style": "IPY_MODEL_02688bab72234a4ea7fe419e42753424",
            "value": "Epoch 9/10 [Training]: 100%"
          }
        },
        "d799ff663d5e4e98900736d3cc4232a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a89d5b30226a41599d2d92ecdc93815b",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_95918645d50c4159a292bad3d7033537",
            "value": 110
          }
        },
        "7b00785ffae1483aa4a6dd5fd557fed9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9e67ca119ad54f499a1f6dab8af1bfd7",
            "placeholder": "​",
            "style": "IPY_MODEL_cbd5a18cfb5c483984820c6a94194a37",
            "value": " 110/110 [07:41&lt;00:00,  3.55s/it, loss=0.000691]"
          }
        },
        "7ad8ed8fad8c44ca960876ef2a6e4cef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2cf13aff915d449b8c3459fcd9a522a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "02688bab72234a4ea7fe419e42753424": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a89d5b30226a41599d2d92ecdc93815b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "95918645d50c4159a292bad3d7033537": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9e67ca119ad54f499a1f6dab8af1bfd7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cbd5a18cfb5c483984820c6a94194a37": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "80f30b5ab0c94a4195432645778c2392": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2327368efde7445883955db5394b6492",
              "IPY_MODEL_fb65298572aa4a69a204361bbc8055cc",
              "IPY_MODEL_93587ec333624d129751a634da61cc24"
            ],
            "layout": "IPY_MODEL_c7c83b2df73d412e86069ed6e6fd85aa"
          }
        },
        "2327368efde7445883955db5394b6492": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_82991a261ff740e98b21bbed05a7b463",
            "placeholder": "​",
            "style": "IPY_MODEL_58f05baab7874041842b36f584db7876",
            "value": "Epoch 10/10 [Training]: 100%"
          }
        },
        "fb65298572aa4a69a204361bbc8055cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_67ab90f1f75a4d08ac07e55d0da534f2",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d882a0b8a91741e382414c0538a8d677",
            "value": 110
          }
        },
        "93587ec333624d129751a634da61cc24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_974291b74407426da4fe89eb065726a0",
            "placeholder": "​",
            "style": "IPY_MODEL_b5606c0c6a6c4f0eb952718cebe0d9f6",
            "value": " 110/110 [07:06&lt;00:00,  3.10s/it, loss=0.00167]"
          }
        },
        "c7c83b2df73d412e86069ed6e6fd85aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "82991a261ff740e98b21bbed05a7b463": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "58f05baab7874041842b36f584db7876": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "67ab90f1f75a4d08ac07e55d0da534f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d882a0b8a91741e382414c0538a8d677": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "974291b74407426da4fe89eb065726a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5606c0c6a6c4f0eb952718cebe0d9f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5d309642ca774cea836e63ab16c2adc3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_db3ad98d23c94d05986866249b2fe7dc",
              "IPY_MODEL_b7ce691dfdfe4aef83ee60a96d45421c",
              "IPY_MODEL_1d68dc78411f44e4ac0bd6277aa8e900"
            ],
            "layout": "IPY_MODEL_5657db2712ba49a49522e034ff511f86"
          }
        },
        "db3ad98d23c94d05986866249b2fe7dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f904c20a4a1b46d6b18a7757d1a8f7df",
            "placeholder": "​",
            "style": "IPY_MODEL_c8e3b4a767074852b8286d28420cfa8a",
            "value": "Generating Embeddings: 100%"
          }
        },
        "b7ce691dfdfe4aef83ee60a96d45421c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ab407fca90d9435f9363eb50d8867814",
            "max": 14,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_da154bedc3714f5aa5d34d8e52360620",
            "value": 14
          }
        },
        "1d68dc78411f44e4ac0bd6277aa8e900": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c8f39e78c8a24217978391ce19c78e2f",
            "placeholder": "​",
            "style": "IPY_MODEL_bf73791c71574720826e93395779e150",
            "value": " 14/14 [00:40&lt;00:00,  2.61s/it]"
          }
        },
        "5657db2712ba49a49522e034ff511f86": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f904c20a4a1b46d6b18a7757d1a8f7df": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c8e3b4a767074852b8286d28420cfa8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ab407fca90d9435f9363eb50d8867814": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "da154bedc3714f5aa5d34d8e52360620": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c8f39e78c8a24217978391ce19c78e2f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bf73791c71574720826e93395779e150": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "33ef8098d26b421b9bc22177d5386b52": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_310de5bebdfe4283bfca5865a9a4fe5f",
              "IPY_MODEL_f4b04fe596944c32a22c285b27a88b73",
              "IPY_MODEL_2b8c885238e94421af14558ad208511f"
            ],
            "layout": "IPY_MODEL_61b0b7f46aac41eb8adcc9e5f4b84349"
          }
        },
        "310de5bebdfe4283bfca5865a9a4fe5f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_241ed7f5e63a474cb0de77dd7381aee8",
            "placeholder": "​",
            "style": "IPY_MODEL_fce0b682b2f14cb3b7cc1c2c3669ada7",
            "value": "Training Set Embeddings: 100%"
          }
        },
        "f4b04fe596944c32a22c285b27a88b73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1aadc8a495d04bfca5871304a6651141",
            "max": 110,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_235da79f15b74f3ead2cfe8a5b647cd5",
            "value": 110
          }
        },
        "2b8c885238e94421af14558ad208511f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c29d948943e644cfaa5eb793eb24e18d",
            "placeholder": "​",
            "style": "IPY_MODEL_1a81ad86e7cd49b399850d21bcffb4ac",
            "value": " 110/110 [04:49&lt;00:00,  2.40s/it]"
          }
        },
        "61b0b7f46aac41eb8adcc9e5f4b84349": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "241ed7f5e63a474cb0de77dd7381aee8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fce0b682b2f14cb3b7cc1c2c3669ada7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1aadc8a495d04bfca5871304a6651141": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "235da79f15b74f3ead2cfe8a5b647cd5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c29d948943e644cfaa5eb793eb24e18d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1a81ad86e7cd49b399850d21bcffb4ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/theimma1/labelee-foundation-model/blob/main/Labelee_Training_Model-Evaluation.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "shAtDvQP_RgR",
        "outputId": "bca01624-fb51-4ae1-884e-71e2dbb01d4b",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'labelee-foundation-model'...\n",
            "remote: Enumerating objects: 78, done.\u001b[K\n",
            "remote: Counting objects: 100% (78/78), done.\u001b[K\n",
            "remote: Compressing objects: 100% (61/61), done.\u001b[K\n",
            "remote: Total 78 (delta 15), reused 68 (delta 10), pack-reused 0 (from 0)\u001b[K\n",
            "Receiving objects: 100% (78/78), 87.11 KiB | 7.92 MiB/s, done.\n",
            "Resolving deltas: 100% (15/15), done.\n",
            "/content/labelee-foundation-model\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/theimma1/labelee-foundation-model.git\n",
        "%cd labelee-foundation-model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install wandb --upgrade # Weights & Biases for experiment tracking"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oP0nqapyhvgL",
        "outputId": "23d258f5-fc70-44c8-db74-4ce869bf7891",
        "collapsed": true
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (0.20.1)\n",
            "Requirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb) (8.2.1)\n",
            "Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.1.44)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from wandb) (24.2)\n",
            "Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb) (4.3.8)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (5.29.5)\n",
            "Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (5.9.5)\n",
            "Requirement already satisfied: pydantic<3 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.11.7)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb) (6.0.2)\n",
            "Requirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.32.3)\n",
            "Requirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.30.0)\n",
            "Requirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb) (1.3.6)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.8 in /usr/local/lib/python3.11/dist-packages (from wandb) (4.14.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.12)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.4.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2025.6.15)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aWTT-hToiJLM",
        "outputId": "8e6f1756-09ec-4b64-e0de-b99e93d425fc",
        "collapsed": true
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -r requirements.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oGf3vjoHivoW",
        "outputId": "d9f3cb66-96b6-4c0f-f942-89aa4c36c7a6",
        "collapsed": true
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 1)) (2.6.0+cu124)\n",
            "Requirement already satisfied: torchvision>=0.15.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 2)) (0.21.0+cu124)\n",
            "Requirement already satisfied: transformers>=4.30.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 3)) (4.52.4)\n",
            "Requirement already satisfied: timm>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 4)) (1.0.15)\n",
            "Requirement already satisfied: wandb>=0.15.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 5)) (0.20.1)\n",
            "Requirement already satisfied: tqdm>=4.65.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 6)) (4.67.1)\n",
            "Collecting ml-collections==0.1.1 (from -r requirements.txt (line 7))\n",
            "  Downloading ml_collections-0.1.1.tar.gz (77 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/77.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.9/77.9 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: Pillow>=9.5.0 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 8)) (11.2.1)\n",
            "Collecting ollama>=0.2.0 (from -r requirements.txt (line 11))\n",
            "  Downloading ollama-0.5.1-py3-none-any.whl.metadata (4.3 kB)\n",
            "Collecting duckduckgo-search>=5.0.0 (from -r requirements.txt (line 12))\n",
            "  Downloading duckduckgo_search-8.0.4-py3-none-any.whl.metadata (16 kB)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.11/dist-packages (from ml-collections==0.1.1->-r requirements.txt (line 7)) (1.4.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from ml-collections==0.1.1->-r requirements.txt (line 7)) (6.0.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from ml-collections==0.1.1->-r requirements.txt (line 7)) (1.17.0)\n",
            "Collecting contextlib2 (from ml-collections==0.1.1->-r requirements.txt (line 7))\n",
            "  Downloading contextlib2-21.6.0-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (3.18.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (4.14.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (2025.3.2)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (12.4.127)\n",
            "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->-r requirements.txt (line 1))\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->-r requirements.txt (line 1)) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->-r requirements.txt (line 1)) (1.3.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision>=0.15.0->-r requirements.txt (line 2)) (2.0.2)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (0.33.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (24.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers>=4.30.0->-r requirements.txt (line 3)) (0.5.3)\n",
            "Requirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (8.2.1)\n",
            "Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (3.1.44)\n",
            "Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (4.3.8)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (5.29.5)\n",
            "Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (5.9.5)\n",
            "Requirement already satisfied: pydantic<3 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (2.11.7)\n",
            "Requirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (2.30.0)\n",
            "Requirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb>=0.15.0->-r requirements.txt (line 5)) (1.3.6)\n",
            "Requirement already satisfied: httpx>=0.27 in /usr/local/lib/python3.11/dist-packages (from ollama>=0.2.0->-r requirements.txt (line 11)) (0.28.1)\n",
            "Collecting primp>=0.15.0 (from duckduckgo-search>=5.0.0->-r requirements.txt (line 12))\n",
            "  Downloading primp-0.15.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n",
            "Requirement already satisfied: lxml>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from duckduckgo-search>=5.0.0->-r requirements.txt (line 12)) (5.4.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb>=0.15.0->-r requirements.txt (line 5)) (4.0.12)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (4.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (2025.6.15)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (1.0.9)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (3.10)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (0.16.0)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers>=4.30.0->-r requirements.txt (line 3)) (1.1.5)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.15.0->-r requirements.txt (line 5)) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.15.0->-r requirements.txt (line 5)) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.15.0->-r requirements.txt (line 5)) (0.4.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers>=4.30.0->-r requirements.txt (line 3)) (3.4.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers>=4.30.0->-r requirements.txt (line 3)) (2.4.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->-r requirements.txt (line 1)) (3.0.2)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb>=0.15.0->-r requirements.txt (line 5)) (5.0.2)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.27->ollama>=0.2.0->-r requirements.txt (line 11)) (1.3.1)\n",
            "Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m38.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m39.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m28.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m62.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ollama-0.5.1-py3-none-any.whl (13 kB)\n",
            "Downloading duckduckgo_search-8.0.4-py3-none-any.whl (18 kB)\n",
            "Downloading primp-0.15.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m65.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading contextlib2-21.6.0-py2.py3-none-any.whl (13 kB)\n",
            "Building wheels for collected packages: ml-collections\n",
            "  Building wheel for ml-collections (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for ml-collections: filename=ml_collections-0.1.1-py3-none-any.whl size=94507 sha256=af77df28bcbaa770625e576371d95863d2b1829641bf31d40bf4dc285c0d31a1\n",
            "  Stored in directory: /root/.cache/pip/wheels/28/82/ef/a6971b09a96519d55ce6efef66f0cbcdef2ae9cc1e6b41daf7\n",
            "Successfully built ml-collections\n",
            "Installing collected packages: primp, nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, contextlib2, nvidia-cusparse-cu12, nvidia-cudnn-cu12, ml-collections, duckduckgo-search, ollama, nvidia-cusolver-cu12\n",
            "  Attempting uninstall: nvidia-nvjitlink-cu12\n",
            "    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n",
            "    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-curand-cu12\n",
            "    Found existing installation: nvidia-curand-cu12 10.3.6.82\n",
            "    Uninstalling nvidia-curand-cu12-10.3.6.82:\n",
            "      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n",
            "  Attempting uninstall: nvidia-cufft-cu12\n",
            "    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n",
            "    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n",
            "      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n",
            "  Attempting uninstall: nvidia-cuda-runtime-cu12\n",
            "    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n",
            "    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cuda-cupti-cu12\n",
            "    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n",
            "    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n",
            "      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n",
            "  Attempting uninstall: nvidia-cublas-cu12\n",
            "    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n",
            "    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n",
            "      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n",
            "  Attempting uninstall: nvidia-cusparse-cu12\n",
            "    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n",
            "    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n",
            "      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n",
            "  Attempting uninstall: nvidia-cudnn-cu12\n",
            "    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n",
            "    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n",
            "      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n",
            "  Attempting uninstall: nvidia-cusolver-cu12\n",
            "    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n",
            "    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n",
            "      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n",
            "Successfully installed contextlib2-21.6.0 duckduckgo-search-8.0.4 ml-collections-0.1.1 nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 ollama-0.5.1 primp-0.15.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade datasets huggingface_hub pyarrow"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZaFfySyTjTMZ",
        "outputId": "cb7ad362-cd1d-4147-a5e7-01814029d134",
        "collapsed": true
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (2.14.4)\n",
            "Collecting datasets\n",
            "  Downloading datasets-3.6.0-py3-none-any.whl.metadata (19 kB)\n",
            "Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.11/dist-packages (0.33.0)\n",
            "Collecting huggingface_hub\n",
            "  Downloading huggingface_hub-0.33.1-py3-none-any.whl.metadata (14 kB)\n",
            "Requirement already satisfied: pyarrow in /usr/local/lib/python3.11/dist-packages (18.1.0)\n",
            "Collecting pyarrow\n",
            "  Downloading pyarrow-20.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.18.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.0.2)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.7)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n",
            "Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.15)\n",
            "Collecting fsspec<=2025.3.0,>=2023.1.0 (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets)\n",
            "  Downloading fsspec-2025.3.0-py3-none-any.whl.metadata (11 kB)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface_hub) (4.14.0)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface_hub) (1.1.5)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.11.15)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.6.15)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.7.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.5.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.20.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n",
            "Downloading datasets-3.6.0-py3-none-any.whl (491 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m491.5/491.5 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading huggingface_hub-0.33.1-py3-none-any.whl (515 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m515.4/515.4 kB\u001b[0m \u001b[31m38.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pyarrow-20.0.0-cp311-cp311-manylinux_2_28_x86_64.whl (42.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.3/42.3 MB\u001b[0m \u001b[31m20.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading fsspec-2025.3.0-py3-none-any.whl (193 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pyarrow, fsspec, huggingface_hub, datasets\n",
            "  Attempting uninstall: pyarrow\n",
            "    Found existing installation: pyarrow 18.1.0\n",
            "    Uninstalling pyarrow-18.1.0:\n",
            "      Successfully uninstalled pyarrow-18.1.0\n",
            "  Attempting uninstall: fsspec\n",
            "    Found existing installation: fsspec 2025.3.2\n",
            "    Uninstalling fsspec-2025.3.2:\n",
            "      Successfully uninstalled fsspec-2025.3.2\n",
            "  Attempting uninstall: huggingface_hub\n",
            "    Found existing installation: huggingface-hub 0.33.0\n",
            "    Uninstalling huggingface-hub-0.33.0:\n",
            "      Successfully uninstalled huggingface-hub-0.33.0\n",
            "  Attempting uninstall: datasets\n",
            "    Found existing installation: datasets 2.14.4\n",
            "    Uninstalling datasets-2.14.4:\n",
            "      Successfully uninstalled datasets-2.14.4\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "cudf-cu12 25.2.1 requires pyarrow<20.0.0a0,>=14.0.0; platform_machine == \"x86_64\", but you have pyarrow 20.0.0 which is incompatible.\n",
            "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\n",
            "pylibcudf-cu12 25.2.1 requires pyarrow<20.0.0a0,>=14.0.0; platform_machine == \"x86_64\", but you have pyarrow 20.0.0 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed datasets-3.6.0 fsspec-2025.3.0 huggingface_hub-0.33.1 pyarrow-20.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datasets import get_dataset_config_names\n",
        "get_dataset_config_names(\"conceptual_captions\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67,
          "referenced_widgets": [
            "1edfc895068f4044816bbd4e1d0ac411",
            "926c8571862d4042858e9201533b8edc",
            "95f1142dd3934ce1adf7e970d10f4698",
            "1910d965403446b19367ac8dce4a58d0",
            "a4866bc6850249aca551bb698cf0d4ee",
            "aec1976e81df4b39b347a911f71519c7",
            "4cd9b0bb9ff34ec3896bc9c1921ef048",
            "2c087f46f6564598a74d12f983af96aa",
            "003aeda165e44f44b682e0e30933bf26",
            "0e116dd6fb9540e7a56aa3fa80958f5f",
            "ae82b16ac40242c6bdfd8ee6ac3c9dca"
          ]
        },
        "id": "VLBvpP89lb3a",
        "outputId": "b2fe3fb5-6234-4db6-e2ec-7b2b03938f19",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md:   0%|          | 0.00/14.2k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1edfc895068f4044816bbd4e1d0ac411"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['labeled', 'unlabeled']"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyarrow==19.0.0 fsspec==2025.3.2 --force-reinstall"
      ],
      "metadata": {
        "id": "vPBAOPtMtIPr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "collapsed": true,
        "outputId": "1a41b0e2-6ba3-4706-85df-4636e9dbf442"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyarrow==19.0.0\n",
            "  Downloading pyarrow-19.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\n",
            "Collecting fsspec==2025.3.2\n",
            "  Downloading fsspec-2025.3.2-py3-none-any.whl.metadata (11 kB)\n",
            "Downloading pyarrow-19.0.0-cp311-cp311-manylinux_2_28_x86_64.whl (42.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.1/42.1 MB\u001b[0m \u001b[31m17.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading fsspec-2025.3.2-py3-none-any.whl (194 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.4/194.4 kB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pyarrow, fsspec\n",
            "  Attempting uninstall: pyarrow\n",
            "    Found existing installation: pyarrow 18.1.0\n",
            "    Uninstalling pyarrow-18.1.0:\n",
            "      Successfully uninstalled pyarrow-18.1.0\n",
            "  Attempting uninstall: fsspec\n",
            "    Found existing installation: fsspec 2025.3.2\n",
            "    Uninstalling fsspec-2025.3.2:\n",
            "      Successfully uninstalled fsspec-2025.3.2\n",
            "Successfully installed fsspec-2025.3.2 pyarrow-19.0.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "fsspec",
                  "pyarrow"
                ]
              },
              "id": "b5b6446170ee4e4b8ad9ef6807516b9d"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U \"datasets>=2.18.0\""
      ],
      "metadata": {
        "id": "tHqo9p5jt3_5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "outputId": "eeb17b39-c041-4318-ded2-7a3810f05a13"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets>=2.18.0 in /usr/local/lib/python3.11/dist-packages (3.6.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (3.18.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (2.0.2)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (20.0.0)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (0.3.7)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (2.2.2)\n",
            "Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (4.67.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (0.70.15)\n",
            "Requirement already satisfied: fsspec<=2025.3.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (2025.3.0)\n",
            "Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (0.33.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.18.0) (6.0.2)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (3.11.15)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets>=2.18.0) (4.14.0)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets>=2.18.0) (1.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets>=2.18.0) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets>=2.18.0) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets>=2.18.0) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets>=2.18.0) (2025.6.15)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets>=2.18.0) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets>=2.18.0) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets>=2.18.0) (2025.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (1.7.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (6.5.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (0.3.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets>=2.18.0) (1.20.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets>=2.18.0) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 3: All imports and setup\n",
        "import torch\n",
        "from datasets import load_dataset\n",
        "from torch.utils.data import DataLoader\n",
        "from src.new_Labelee_model import create_labelee_foundation, MultiTaskLoss\n",
        "from PIL import Image\n",
        "import requests\n",
        "import torchvision.transforms as transforms\n",
        "import wandb\n",
        "import os\n",
        "\n",
        "# --- Mount Drive and Define Paths ---\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "CHECKPOINT_DIR = '/content/drive/My Drive/labelee_checkpoints'\n",
        "os.makedirs(CHECKPOINT_DIR, exist_ok=True)\n",
        "print(\"✅ Setup Complete. Drive is mounted and checkpoint directory is ready.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LqvBuk15l1j4",
        "outputId": "3bf556c4-fdf2-49b6-a419-e250ada64c23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "✅ Setup Complete. Drive is mounted and checkpoint directory is ready.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 5: The Original Main Training Script\n",
        "\n",
        "# --- 1. Imports and Configuration ---\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader\n",
        "import wandb\n",
        "import os\n",
        "from tqdm.auto import tqdm # For a nice progress bar\n",
        "\n",
        "# Use the variables defined in the previous cell:\n",
        "# model, tokenizer, processed_ds, CHECKPOINT_DIR, criterion\n",
        "\n",
        "# Configuration for this training run\n",
        "config = {\n",
        "    \"epochs\": 5,                 # The number of times to loop over the training data\n",
        "    \"batch_size\": 32,            # Number of examples per batch. Adjust based on Colab GPU memory.\n",
        "    \"learning_rate\": 2e-5,       # A good starting learning rate for fine-tuning transformers\n",
        "    \"optimizer\": \"AdamW\",\n",
        "    \"training_task\": \"contrastive\", # A strong objective for learning joint embeddings\n",
        "    \"steps_per_epoch\": 5000,     # Since we are streaming, we define an \"epoch\" as a fixed number of steps\n",
        "}\n",
        "\n",
        "# --- 2. Initialize for Training ---\n",
        "# Start an experiment run with Weights & Biases\n",
        "wandb.login()\n",
        "run = wandb.init(\n",
        "    project=\"labelee-foundation-model\",\n",
        "    name=f\"training_run_task_{config['training_task']}\",\n",
        "    config=config\n",
        ")\n",
        "\n",
        "# Set device to GPU\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model.to(device)\n",
        "\n",
        "# Define optimizer\n",
        "optimizer = optim.AdamW(model.parameters(), lr=config[\"learning_rate\"])\n",
        "\n",
        "criterion = MultiTaskLoss()\n",
        "\n",
        "\n",
        "# Create the PyTorch DataLoader\n",
        "# `processed_ds` is your dataset with the transform applied from the previous cell\n",
        "# We need to set the format to 'torch' so it yields tensors\n",
        "train_loader = DataLoader(processed_ds, batch_size=config[\"batch_size\"])\n",
        "\n",
        "# Watch the model to log gradients and parameters\n",
        "wandb.watch(model, log=\"all\", log_freq=100)\n",
        "\n",
        "# --- 3. The Training Loop ---\n",
        "print(\"🚀 Starting training...\")\n",
        "best_loss = float('inf')\n",
        "global_step = 0\n",
        "\n",
        "for epoch in range(config[\"epochs\"]):\n",
        "    model.train() # Set the model to training mode\n",
        "\n",
        "    # Use tqdm for a progress bar\n",
        "    pbar = tqdm(train_loader, total=config[\"steps_per_epoch\"], desc=f\"Epoch {epoch + 1}/{config['epochs']}\")\n",
        "\n",
        "    for i, batch in enumerate(pbar):\n",
        "        if i >= config[\"steps_per_epoch\"]:\n",
        "            break\n",
        "\n",
        "        # Move batch to GPU\n",
        "        images = batch['pixel_values'].to(device)\n",
        "        input_ids = batch['input_ids'].to(device)\n",
        "        attention_mask = batch['attention_mask'].to(device)\n",
        "        labels = None # Contrastive loss doesn't need explicit labels\n",
        "\n",
        "        # --- Forward and Backward Pass ---\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(images, input_ids, attention_mask, task=config[\"training_task\"])\n",
        "        loss, loss_dict = criterion(outputs, labels, task=config[\"training_task\"])\n",
        "\n",
        "        if torch.isnan(loss):\n",
        "            print(f\"Warning: NaN loss at step {global_step}. Skipping step.\")\n",
        "            continue\n",
        "\n",
        "        loss.backward()\n",
        "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0) # Gradient clipping for stability\n",
        "        optimizer.step()\n",
        "\n",
        "        # --- Logging and Progress Bar ---\n",
        "        global_step += 1\n",
        "        wandb.log({\"train_loss\": loss.item(), \"epoch\": epoch + 1, \"global_step\": global_step})\n",
        "        pbar.set_postfix(loss=loss.item())\n",
        "\n",
        "    # --- 4. Checkpointing after each epoch ---\n",
        "    print(f\"--- End of Epoch {epoch+1} ---\")\n",
        "\n",
        "    # Save a checkpoint to Google Drive\n",
        "    checkpoint_path = os.path.join(CHECKPOINT_DIR, f'checkpoint_epoch_{epoch+1}.pth')\n",
        "    torch.save({\n",
        "        'epoch': epoch + 1,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'loss': loss.item(), # Save the last loss of the epoch\n",
        "    }, checkpoint_path)\n",
        "    print(f\"✅ Checkpoint saved to {checkpoint_path}\")\n",
        "\n",
        "    # For now, we save the latest model as the \"best\" model.\n",
        "    # In a full setup, you would have a validation loop here to determine the actual best model.\n",
        "    best_model_path = os.path.join(CHECKPOINT_DIR, 'best_model.pth')\n",
        "    torch.save(model.state_dict(), best_model_path)\n",
        "    print(f\"🏆 Best model updated and saved to {best_model_path}\")\n",
        "\n",
        "print(\"🎉 Training Finished!\")\n",
        "wandb.finish()"
      ],
      "metadata": {
        "id": "c54G_-F495Y8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 4 (NEW for E-commerce): Data Pipeline\n",
        "\n",
        "import torch\n",
        "import torchvision.transforms as transforms\n",
        "from datasets import load_dataset\n",
        "from PIL import Image\n",
        "import requests\n",
        "\n",
        "# Import your model code\n",
        "from src.new_Labelee_model import create_labelee_foundation, MultiTaskLoss\n",
        "\n",
        "# --- Load Model and Tokenizer (This part stays the same) ---\n",
        "model, tokenizer = create_labelee_foundation()\n",
        "\n",
        "# --- Define Image Transformations ---\n",
        "image_transforms = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
        "])\n",
        "\n",
        "# --- Load YOUR E-commerce Dataset ---\n",
        "# IMPORTANT: Replace 'YOUR_DATASET_NAME_ON_HUB' with the actual Hugging Face Hub name\n",
        "# For example: 'ashraq/amazon-product-reviews-multimodal' or whatever you found.\n",
        "ds = load_dataset(\"Hamzaizhappy786/Hybrid-E-Commerce_Product\")\n",
        "\n",
        "# --- Create the Preprocessing Function for the NEW data ---\n",
        "def preprocess_ecommerce(examples):\n",
        "    # This function is tailored to your new dataset's columns\n",
        "\n",
        "    # Combine the title and description for rich text context\n",
        "    # We will ignore the noisy 'review_text' for now.\n",
        "    texts = [title + \". \" + desc for title, desc in zip(examples['product_title'], examples['description'])]\n",
        "\n",
        "    # The 'images_x' column seems to contain URLs\n",
        "    try:\n",
        "        # This handles cases where the image data is a URL\n",
        "        images = [image_transforms(Image.open(requests.get(url, stream=True, timeout=5).raw).convert(\"RGB\")) for url in examples['images_x']]\n",
        "    except:\n",
        "        # This handles cases where the image data might be raw bytes already\n",
        "        images = [image_transforms(img.convert(\"RGB\")) for img in examples['images_x']]\n",
        "\n",
        "\n",
        "    tokenized_text = tokenizer(texts, padding=\"max_length\", truncation=True, max_length=128) # Increased max length for descriptions\n",
        "\n",
        "    examples['pixel_values'] = images\n",
        "    examples['input_ids'] = tokenized_text['input_ids']\n",
        "    examples['attention_mask'] = tokenized_text['attention_mask']\n",
        "    return examples\n",
        "\n",
        "# Apply the transform. Since the dataset is small, we don't need streaming.\n",
        "# We will process the entire dataset in memory.\n",
        "processed_ds = ds.with_transform(preprocess_ecommerce)\n",
        "\n",
        "print(\"✅ E-commerce data pipeline is ready.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lHJK9zC1Xj31",
        "outputId": "e3ef96ab-4f51-464d-bf15-dde9b0fc5124"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/torch/nn/init.py:511: UserWarning: Initializing zero-element tensors is a no-op\n",
            "  warnings.warn(\"Initializing zero-element tensors is a no-op\")\n",
            "/usr/local/lib/python3.11/dist-packages/torch/nn/init.py:565: UserWarning: Initializing zero-element tensors is a no-op\n",
            "  warnings.warn(\"Initializing zero-element tensors is a no-op\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Labelee Foundation Model created:\n",
            "  Total parameters: 189,471,222\n",
            "  Trainable parameters: 189,471,222\n",
            "  Vision backbone: vit_base_patch16_224.augreg_in21k_ft_in1k\n",
            "  Text backbone: distilbert-base-uncased\n",
            "✅ E-commerce data pipeline is ready.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hDf5S1fIdp7F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 1: Get Code\n",
        "!git clone https://github.com/theimma1/labelee-foundation-model.git\n",
        "%cd labelee-foundation-model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BeGn3el2oVrv",
        "outputId": "13f2b6a9-ca5a-4ab8-cb51-faa43a48eb37"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'labelee-foundation-model' already exists and is not an empty directory.\n",
            "/content/labelee-foundation-model\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 2: Install Libraries\n",
        "!pip install -r requirements.txt --quiet\n",
        "!pip install --upgrade datasets huggingface_hub pyarrow wandb --quiet"
      ],
      "metadata": {
        "id": "cjkmvRd1p1gw"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 1 (Improved & Resilient): Get Code & Change Directory\n",
        "import os\n",
        "\n",
        "repo_name = \"labelee-foundation-model\"\n",
        "\n",
        "# Check if the repository folder already exists before trying to clone\n",
        "if not os.path.exists(repo_name):\n",
        "  print(f\"Cloning repository: {repo_name}...\")\n",
        "  !git clone https://github.com/theimma1/labelee-foundation-model.git\n",
        "else:\n",
        "  print(f\"Repository '{repo_name}' already exists. Skipping clone.\")\n",
        "\n",
        "# Always change into the directory.\n",
        "%cd $repo_name\n",
        "print(f\"✅ Current directory is now: /content/{repo_name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DC4sdVHCp36r",
        "outputId": "9ab02298-6213-4c6c-ab66-f7e8298b91a3"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Repository 'labelee-foundation-model' already exists. Skipping clone.\n",
            "/content/labelee-foundation-model/labelee-foundation-model\n",
            "✅ Current directory is now: /content/labelee-foundation-model\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 1: Get Code and Change Directory\n",
        "import os\n",
        "repo_name = \"labelee-foundation-model\"\n",
        "\n",
        "if not os.path.exists(repo_name):\n",
        "  print(f\"Cloning repository: {repo_name}...\")\n",
        "  !git clone https://github.com/theimma1/labelee-foundation-model.git\n",
        "else:\n",
        "  print(f\"Repository '{repo_name}' already exists. Skipping clone.\")\n",
        "\n",
        "%cd $repo_name\n",
        "print(f\"✅ Current directory is now: /content/{repo_name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAcAN3Q-zPtl",
        "outputId": "316f83fd-9063-4dca-ee13-c6cf775a05c4"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning repository: labelee-foundation-model...\n",
            "Cloning into 'labelee-foundation-model'...\n",
            "remote: Enumerating objects: 78, done.\u001b[K\n",
            "remote: Counting objects: 100% (78/78), done.\u001b[K\n",
            "remote: Compressing objects: 100% (61/61), done.\u001b[K\n",
            "remote: Total 78 (delta 15), reused 68 (delta 10), pack-reused 0 (from 0)\u001b[K\n",
            "Receiving objects: 100% (78/78), 87.11 KiB | 1.71 MiB/s, done.\n",
            "Resolving deltas: 100% (15/15), done.\n",
            "/content/labelee-foundation-model\n",
            "✅ Current directory is now: /content/labelee-foundation-model\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 3: Setup Runtime Environment\n",
        "\n",
        "# --- Standard imports ---\n",
        "import os\n",
        "import requests\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "from datasets import load_dataset\n",
        "from PIL import Image\n",
        "import wandb\n",
        "from tqdm.auto import tqdm\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# --- THIS IS THE FIX: Add the standard PyTorch and Typing aliases ---\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from typing import List, Tuple, Dict, Optional\n",
        "from transformers import AutoTokenizer, AutoModel\n",
        "import timm\n",
        "\n",
        "# --- This is the key fix for the NameError ---\n",
        "# We are now defining all your classes directly in the notebook session\n",
        "class SpatialAttentionModule(nn.Module):\n",
        "    \"\"\"Novel spatial attention mechanism for image features\"\"\"\n",
        "    def __init__(self, channels: int):\n",
        "        super().__init__()\n",
        "        self.channels = channels\n",
        "        self.conv_query = nn.Conv2d(channels, channels // 4, 1)\n",
        "        self.conv_key = nn.Conv2d(channels, channels // 4, 1)\n",
        "        self.conv_value = nn.Conv2d(channels, channels, 1)\n",
        "        self.gamma = nn.Parameter(torch.zeros(1))\n",
        "        for m in [self.conv_query, self.conv_key, self.conv_value]:\n",
        "            nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
        "            if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "    def forward(self, x):\n",
        "        batch_size, channels, height, width = x.size()\n",
        "        query = self.conv_query(x).view(batch_size, -1, height * width).permute(0, 2, 1)\n",
        "        key = self.conv_key(x).view(batch_size, -1, height * width)\n",
        "        value = self.conv_value(x).view(batch_size, -1, height * width)\n",
        "        attention = torch.bmm(query, key)\n",
        "        attention = attention / math.sqrt(channels // 4)\n",
        "        attention = torch.clamp(attention, -5, 5)\n",
        "        attention = F.softmax(attention, dim=-1)\n",
        "        out = torch.bmm(value, attention.permute(0, 2, 1))\n",
        "        out = out.view(batch_size, channels, height, width)\n",
        "        return self.gamma * out + x\n",
        "\n",
        "class HybridImageEncoder(nn.Module):\n",
        "    \"\"\"Hybrid image encoder combining TIMM backbone with novel spatial attention\"\"\"\n",
        "    def __init__(self, model_name='vit_base_patch16_224.augreg_in21k_ft_in1k', feature_dim=768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.backbone = timm.create_model(model_name, pretrained=True, num_classes=0)\n",
        "        backbone_dim = self.backbone.embed_dim if hasattr(self.backbone, 'embed_dim') else self.backbone.num_features\n",
        "        self.spatial_attention = SpatialAttentionModule(3)\n",
        "        self.feature_projector = nn.Linear(backbone_dim, feature_dim)\n",
        "        self.refinement = nn.Sequential(nn.Linear(feature_dim, feature_dim * 2), nn.LayerNorm(feature_dim * 2), nn.GELU(), nn.Dropout(0.1), nn.Linear(feature_dim * 2, feature_dim), nn.LayerNorm(feature_dim))\n",
        "        self._initialize_weights()\n",
        "    def _initialize_weights(self):\n",
        "        for m in [self.feature_projector] + list(self.refinement.modules()):\n",
        "            if isinstance(m, nn.Linear):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "    def forward(self, x):\n",
        "        x = torch.clamp(x, -3.0, 3.0)\n",
        "        if x.shape[2] == x.shape[3]:\n",
        "            try:\n",
        "                x_attended = self.spatial_attention(x)\n",
        "                x = 0.8 * x + 0.2 * x_attended\n",
        "            except: pass\n",
        "        try:\n",
        "            if hasattr(self.backbone, 'forward_features'):\n",
        "                features = self.backbone.forward_features(x)\n",
        "                if len(features.shape) == 3: features = features[:, 0]\n",
        "                elif len(features.shape) == 4: features = F.adaptive_avg_pool2d(features, 1).flatten(1)\n",
        "            else: features = self.backbone(x)\n",
        "        except Exception as e:\n",
        "            print(f\"Backbone error: {e}, using fallback\")\n",
        "            features = torch.randn(x.shape[0], 768, device=x.device) * 0.1\n",
        "        features = self.feature_projector(features)\n",
        "        refined_features = self.refinement(features)\n",
        "        return torch.clamp(refined_features, -10, 10)\n",
        "\n",
        "class HybridTextEncoder(nn.Module):\n",
        "    \"\"\"Hybrid text encoder combining Transformers backbone with novel semantic layers\"\"\"\n",
        "    def __init__(self, model_name='distilbert-base-uncased', feature_dim=768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        try:\n",
        "            self.backbone = AutoModel.from_pretrained(model_name)\n",
        "            backbone_dim = self.backbone.config.dim if hasattr(self.backbone.config, 'dim') else self.backbone.config.hidden_size\n",
        "        except:\n",
        "            from transformers import AutoConfig\n",
        "            config = AutoConfig.from_pretrained(model_name)\n",
        "            self.backbone = AutoModel.from_config(config)\n",
        "            backbone_dim = config.hidden_size\n",
        "        self.feature_projector = nn.Linear(backbone_dim, feature_dim)\n",
        "        self.semantic_enhancement = nn.ModuleList([self._make_semantic_layer(feature_dim) for _ in range(2)])\n",
        "        self.word_aggregator = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.context_aggregator = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.final_projection = nn.Sequential(nn.Linear(feature_dim * 2, feature_dim * 2), nn.LayerNorm(feature_dim * 2), nn.GELU(), nn.Dropout(0.1), nn.Linear(feature_dim * 2, feature_dim), nn.LayerNorm(feature_dim))\n",
        "        self._initialize_weights()\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear) and m not in self.backbone.modules():\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "    def _make_semantic_layer(self, dim):\n",
        "        return nn.ModuleDict({'self_attention': nn.MultiheadAttention(dim, 8, batch_first=True, dropout=0.1), 'feed_forward': nn.Sequential(nn.Linear(dim, dim * 2), nn.GELU(), nn.Dropout(0.1), nn.Linear(dim * 2, dim)), 'norm1': nn.LayerNorm(dim), 'norm2': nn.LayerNorm(dim)})\n",
        "    def forward(self, input_ids, attention_mask=None):\n",
        "        try:\n",
        "            outputs = self.backbone(input_ids=input_ids, attention_mask=attention_mask)\n",
        "            if hasattr(outputs, 'last_hidden_state'):\n",
        "                hidden_states = outputs.last_hidden_state\n",
        "                if attention_mask is not None:\n",
        "                    mask_expanded = attention_mask.unsqueeze(-1).expand(hidden_states.size()).float()\n",
        "                    sum_embeddings = torch.sum(hidden_states * mask_expanded, 1)\n",
        "                    sum_mask = torch.clamp(mask_expanded.sum(1), min=1e-9)\n",
        "                    features = sum_embeddings / sum_mask\n",
        "                else: features = hidden_states.mean(1)\n",
        "            else: features = outputs.pooler_output if hasattr(outputs, 'pooler_output') else outputs[0].mean(1)\n",
        "        except Exception as e:\n",
        "            print(f\"Text backbone error: {e}\")\n",
        "            batch_size = input_ids.shape[0]\n",
        "            features = torch.randn(batch_size, 768, device=input_ids.device) * 0.1\n",
        "            hidden_states = features.unsqueeze(1).expand(-1, input_ids.shape[1], -1)\n",
        "        features = self.feature_projector(features)\n",
        "        projected_hidden = self.feature_projector(hidden_states) if 'hidden_states' in locals() else features.unsqueeze(1)\n",
        "        enhanced_features = projected_hidden\n",
        "        key_padding_mask = ~attention_mask.bool() if attention_mask is not None else None\n",
        "        for layer in self.semantic_enhancement:\n",
        "            try:\n",
        "                attn_out, _ = layer['self_attention'](enhanced_features, enhanced_features, enhanced_features, key_padding_mask=key_padding_mask)\n",
        "                enhanced_features = layer['norm1'](enhanced_features + attn_out)\n",
        "                ff_out = layer['feed_forward'](enhanced_features)\n",
        "                enhanced_features = layer['norm2'](enhanced_features + ff_out)\n",
        "            except: enhanced_features = layer['norm1'](enhanced_features)\n",
        "        try:\n",
        "            word_repr, _ = self.word_aggregator(enhanced_features, enhanced_features, enhanced_features, key_padding_mask=key_padding_mask)\n",
        "            context_repr, _ = self.context_aggregator(word_repr, word_repr, word_repr, key_padding_mask=key_padding_mask)\n",
        "            if attention_mask is not None:\n",
        "                mask_expanded = attention_mask.unsqueeze(-1).float()\n",
        "                seq_lengths = attention_mask.sum(-1, keepdim=True).clamp(min=1)\n",
        "                word_pooled = (word_repr * mask_expanded).sum(1) / seq_lengths\n",
        "                context_pooled = (context_repr * mask_expanded).sum(1) / seq_lengths\n",
        "            else:\n",
        "                word_pooled = word_repr.mean(1)\n",
        "                context_pooled = context_repr.mean(1)\n",
        "        except:\n",
        "            word_pooled = features\n",
        "            context_pooled = features\n",
        "        combined = torch.cat([word_pooled, context_pooled], dim=1)\n",
        "        final_features = self.final_projection(combined)\n",
        "        return torch.clamp(final_features, -10, 10)\n",
        "\n",
        "class CrossModalFusionNetwork(nn.Module):\n",
        "    \"\"\"Enhanced cross-modal fusion with interactive attention and stability improvements\"\"\"\n",
        "    def __init__(self, feature_dim: int = 768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.vision_to_text = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.text_to_vision = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.interactive_fusion = nn.Sequential(nn.Linear(feature_dim * 4, feature_dim * 2), nn.LayerNorm(feature_dim * 2), nn.GELU(), nn.Dropout(0.2), nn.Linear(feature_dim * 2, feature_dim), nn.LayerNorm(feature_dim))\n",
        "        self.vision_refine = nn.Linear(feature_dim, feature_dim)\n",
        "        self.text_refine = nn.Linear(feature_dim, feature_dim)\n",
        "        self.fusion_gate = nn.Sequential(nn.Linear(feature_dim * 2, feature_dim), nn.Sigmoid())\n",
        "        self._initialize_weights()\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "    def forward(self, vision_features, text_features):\n",
        "        vision_features = torch.clamp(vision_features, -10, 10)\n",
        "        text_features = torch.clamp(text_features, -10, 10)\n",
        "        vision_expanded = vision_features.unsqueeze(1)\n",
        "        text_expanded = text_features.unsqueeze(1)\n",
        "        try:\n",
        "            v2t_attended, _ = self.vision_to_text(vision_expanded, text_expanded, text_expanded)\n",
        "            v2t_attended = torch.clamp(v2t_attended.squeeze(1), -5, 5)\n",
        "        except: v2t_attended = vision_features\n",
        "        try:\n",
        "            t2v_attended, _ = self.text_to_vision(text_expanded, vision_expanded, vision_expanded)\n",
        "            t2v_attended = torch.clamp(t2v_attended.squeeze(1), -5, 5)\n",
        "        except: t2v_attended = text_features\n",
        "        fused_features = torch.cat([vision_features, text_features, v2t_attended, t2v_attended], dim=1)\n",
        "        interactive_output = self.interactive_fusion(fused_features)\n",
        "        gate_input = torch.cat([vision_features, text_features], dim=1)\n",
        "        fusion_weight = self.fusion_gate(gate_input)\n",
        "        refined_vision = self.vision_refine(vision_features + fusion_weight * interactive_output)\n",
        "        refined_text = self.text_refine(text_features + (1 - fusion_weight) * interactive_output)\n",
        "        return refined_vision, refined_text, interactive_output\n",
        "\n",
        "class LabeleeFoundation(nn.Module):\n",
        "    \"\"\"Re-architected Labelee Foundation Model for pre-training\"\"\"\n",
        "    def __init__(self, vision_model_name='vit_base_patch16_224.augreg_in21k_ft_in1k', text_model_name='distilbert-base-uncased', feature_dim=768, num_classes=1000):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.image_encoder = HybridImageEncoder(vision_model_name, feature_dim)\n",
        "        self.text_encoder = HybridTextEncoder(text_model_name, feature_dim)\n",
        "        self.fusion_network = CrossModalFusionNetwork(feature_dim)\n",
        "        self.similarity_head = nn.Sequential(nn.Linear(feature_dim, feature_dim // 2), nn.LayerNorm(feature_dim // 2), nn.ReLU(), nn.Dropout(0.1), nn.Linear(feature_dim // 2, 1))\n",
        "        self.classification_head = nn.Sequential(nn.Linear(feature_dim, feature_dim // 2), nn.LayerNorm(feature_dim // 2), nn.ReLU(), nn.Dropout(0.1), nn.Linear(feature_dim // 2, num_classes))\n",
        "        self.contrastive_head = nn.Sequential(nn.Linear(feature_dim, feature_dim), nn.LayerNorm(feature_dim), nn.ReLU(), nn.Linear(feature_dim, feature_dim // 2))\n",
        "        self.vision_reconstruction = nn.Linear(feature_dim, feature_dim)\n",
        "        self.text_reconstruction = nn.Linear(feature_dim, feature_dim)\n",
        "        self._initialize_weights()\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear) and not any(m in encoder.modules() for encoder in [self.image_encoder.backbone, self.text_encoder.backbone]):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "    def forward(self, images, input_ids, attention_mask=None, task='similarity', return_features=False):\n",
        "        try: vision_features = self.image_encoder(images)\n",
        "        except Exception as e:\n",
        "            print(f\"Vision encoder error: {e}\")\n",
        "            vision_features = torch.randn(images.shape[0], self.feature_dim, device=images.device) * 0.1\n",
        "        try: text_features = self.text_encoder(input_ids, attention_mask)\n",
        "        except Exception as e:\n",
        "            print(f\"Text encoder error: {e}\")\n",
        "            text_features = torch.randn(input_ids.shape[0], self.feature_dim, device=input_ids.device) * 0.1\n",
        "        fused_vision, fused_text, interactive_features = self.fusion_network(vision_features, text_features)\n",
        "        if return_features:\n",
        "            return {'vision_features': vision_features, 'text_features': text_features, 'fused_vision': fused_vision, 'fused_text': fused_text, 'interactive_features': interactive_features}\n",
        "        if task == 'similarity': return self.similarity_head(interactive_features)\n",
        "        elif task == 'classification': return self.classification_head(interactive_features)\n",
        "        elif task == 'contrastive':\n",
        "            vision_proj = self.contrastive_head(fused_vision)\n",
        "            text_proj = self.contrastive_head(fused_text)\n",
        "            return vision_proj, text_proj\n",
        "        elif task == 'reconstruction':\n",
        "            vision_recon = self.vision_reconstruction(fused_vision)\n",
        "            text_recon = self.text_reconstruction(fused_text)\n",
        "            return vision_recon, text_recon, vision_features, text_features\n",
        "        else: return fused_vision, fused_text, interactive_features\n",
        "\n",
        "class MultiTaskLoss(nn.Module):\n",
        "    \"\"\"Enhanced multi-task loss for pre-training with numerical stability\"\"\"\n",
        "    def __init__(self, alpha=1.0, beta=0.5, gamma=0.3, delta=0.2):\n",
        "        super().__init__()\n",
        "        self.alpha = alpha; self.beta = beta; self.gamma = gamma; self.delta = delta\n",
        "    def similarity_loss(self, scores, labels):\n",
        "        scores = scores.squeeze(); labels = labels.float().squeeze()\n",
        "        if scores.dim() == 0: scores = scores.unsqueeze(0)\n",
        "        if labels.dim() == 0: labels = labels.unsqueeze(0)\n",
        "        return F.binary_cross_entropy_with_logits(scores, labels, reduction='mean')\n",
        "    def contrastive_loss(self, vision_proj, text_proj, temperature=0.07):\n",
        "        vision_norm = F.normalize(vision_proj, p=2, dim=1, eps=1e-8)\n",
        "        text_norm = F.normalize(text_proj, p=2, dim=1, eps=1e-8)\n",
        "        sim_matrix = torch.matmul(vision_norm, text_norm.T) / temperature\n",
        "        sim_matrix = torch.clamp(sim_matrix, -10, 10)\n",
        "        labels = torch.arange(vision_proj.shape[0], device=vision_proj.device)\n",
        "        loss_v2t = F.cross_entropy(sim_matrix, labels, reduction='mean')\n",
        "        loss_t2v = F.cross_entropy(sim_matrix.T, labels, reduction='mean')\n",
        "        return (loss_v2t + loss_t2v) / 2\n",
        "    def reconstruction_loss(self, recon_v, recon_t, orig_v, orig_t):\n",
        "        loss_v = F.mse_loss(recon_v, orig_v, reduction='mean')\n",
        "        loss_t = F.mse_loss(recon_t, orig_t, reduction='mean')\n",
        "        return (loss_v + loss_t) / 2\n",
        "    def classification_loss(self, logits, labels):\n",
        "        return F.cross_entropy(logits, labels, reduction='mean')\n",
        "    def forward(self, outputs, labels, task='similarity'):\n",
        "        total_loss = 0; loss_dict = {}\n",
        "        if task == 'similarity':\n",
        "            sim_loss = self.similarity_loss(outputs, labels)\n",
        "            total_loss += self.alpha * sim_loss\n",
        "            loss_dict['similarity'] = sim_loss.item()\n",
        "        elif task == 'contrastive':\n",
        "            vision_proj, text_proj = outputs\n",
        "            cont_loss = self.contrastive_loss(vision_proj, text_proj)\n",
        "            total_loss += self.gamma * cont_loss\n",
        "            loss_dict['contrastive'] = cont_loss.item()\n",
        "        elif task == 'reconstruction':\n",
        "            recon_v, recon_t, orig_v, orig_t = outputs\n",
        "            recon_loss = self.reconstruction_loss(recon_v, recon_t, orig_v, orig_t)\n",
        "            total_loss += self.beta * recon_loss\n",
        "            loss_dict['reconstruction'] = recon_loss.item()\n",
        "        elif task == 'classification':\n",
        "            class_loss = self.classification_loss(outputs, labels)\n",
        "            total_loss += self.delta * class_loss\n",
        "            loss_dict['classification'] = class_loss.item()\n",
        "        if torch.isnan(total_loss) or torch.isinf(total_loss):\n",
        "            total_loss = torch.tensor(0.0, device=total_loss.device, requires_grad=True)\n",
        "        return total_loss, loss_dict\n",
        "\n",
        "def create_labelee_foundation(config: Dict = None):\n",
        "    \"\"\"Factory function to create Labelee Foundation model with different configurations\"\"\"\n",
        "    default_config = {'vision_model_name': 'vit_base_patch16_224.augreg_in21k_ft_in1k', 'text_model_name': 'distilbert-base-uncased', 'feature_dim': 768, 'num_classes': 1000}\n",
        "    if config: default_config.update(config)\n",
        "    model_args = {'vision_model_name': default_config['vision_model_name'], 'text_model_name': default_config['text_model_name'], 'feature_dim': default_config['feature_dim'], 'num_classes': default_config['num_classes']}\n",
        "    model = LabeleeFoundation(**model_args)\n",
        "    tokenizer = AutoTokenizer.from_pretrained(default_config['text_model_name'])\n",
        "    total_params = sum(p.numel() for p in model.parameters())\n",
        "    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "    print(f\"Labelee Foundation Model created:\")\n",
        "    print(f\"  Total parameters: {total_params:,}\")\n",
        "    print(f\"  Trainable parameters: {trainable_params:,}\")\n",
        "    print(f\"  Vision backbone: {default_config['vision_model_name']}\")\n",
        "    print(f\"  Text backbone: {default_config['text_model_name']}\")\n",
        "    return model, tokenizer\n",
        "\n",
        "print(\"✅ Environment is stable and all libraries are imported.\")\n",
        "\n",
        "# --- PHASE 2: DATA PREPARATION ---\n",
        "print(\"\\nPHASE 2: Preparing data pipeline...\")\n",
        "\n",
        "# 2a. Define model and image transforms\n",
        "model, tokenizer = create_labelee_foundation()\n",
        "image_transforms = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
        "])\n",
        "\n",
        "# 2b. Load the raw dataset and convert to a Pandas DataFrame\n",
        "dataset_hub_name = \"Hamzaizhappy786/Hybrid-E-Commerce_Product\"\n",
        "ds = load_dataset(dataset_hub_name)\n",
        "df = ds['train'].to_pandas()\n",
        "# --- THE FIX: Remove duplicate products before splitting ---\n",
        "df.drop_duplicates(subset=['product_title'], inplace=True)\n",
        "print(f\"✅ Dataset de-duplicated. {len(df)} unique products remaining.\")\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# 2c. Define the Custom PyTorch Dataset Class\n",
        "from torch.utils.data import Dataset\n",
        "\n",
        "class ECommerceDataset(Dataset):\n",
        "    def __init__(self, dataframe, tokenizer, transforms):\n",
        "        self.dataframe = dataframe\n",
        "        self.tokenizer = tokenizer\n",
        "        self.transforms = transforms\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataframe)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        row = self.dataframe.iloc[idx]\n",
        "        try:\n",
        "            # Get image and text\n",
        "            image_url = row['images_x']\n",
        "            text = row['product_title'] + \". \" + row['description']\n",
        "\n",
        "            # Process image\n",
        "            image = Image.open(requests.get(image_url, stream=True, timeout=5).raw).convert(\"RGB\")\n",
        "            pixel_values = self.transforms(image)\n",
        "\n",
        "            # Process text\n",
        "            tokenized_text = self.tokenizer(text, padding=\"max_length\", truncation=True, max_length=128, return_tensors=\"pt\")\n",
        "            input_ids = tokenized_text['input_ids'].squeeze()\n",
        "            attention_mask = tokenized_text['attention_mask'].squeeze()\n",
        "\n",
        "            return {\n",
        "                'pixel_values': pixel_values,\n",
        "                'input_ids': input_ids,\n",
        "                'attention_mask': attention_mask\n",
        "            }\n",
        "        except Exception as e:\n",
        "            # If this example is bad, we robustly fetch the next one instead\n",
        "            # print(f\"Skipping bad item at index {idx}, trying next. Error: {e}\")\n",
        "            return self.__getitem__((idx + 1) % len(self))\n",
        "\n",
        "# 2d. Create instances of our custom dataset\n",
        "full_dataset = ECommerceDataset(df, tokenizer, image_transforms)\n",
        "\n",
        "# In your training script...\n",
        "\n",
        "# 2e. Split the dataset and create the DataLoaders\n",
        "print(\"\\nPHASE 2.5: Creating DataLoaders...\")\n",
        "\n",
        "# Define the sizes for the splits\n",
        "train_size = int(0.8 * len(full_dataset))\n",
        "val_size = int(0.1 * len(full_dataset))\n",
        "test_size = len(full_dataset) - train_size - val_size # The remainder\n",
        "\n",
        "# Split the dataset into three parts\n",
        "train_dataset, val_dataset, test_dataset = torch.utils.data.random_split(full_dataset, [train_size, val_size, test_size])\n",
        "\n",
        "# --- IMPORTANT ---\n",
        "# Save the test dataset so your evaluation script can load the exact same data\n",
        "torch.save(test_dataset, 'test_dataset.pth')\n",
        "print(f\"✅ Test dataset created with {len(test_dataset)} samples and saved to 'test_dataset.pth'\")\n",
        "\n",
        "\n",
        "# Create DataLoaders for training and validation\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32)\n",
        "\n",
        "print(\"✅ Data pipeline is fully operational.\")\n",
        "\n",
        "# ... (the rest of your training script remains the same)\n",
        "# 3a. Initialize experiment tracking\n",
        "CHECKPOINT_DIR = '/content/drive/My Drive/labelee_checkpoints'\n",
        "os.makedirs(CHECKPOINT_DIR, exist_ok=True)\n",
        "wandb.login()\n",
        "config = {\"learning_rate\": 5e-6, \"epochs\": 10, \"batch_size\": 32, \"task\": \"contrastive\"}\n",
        "run = wandb.init(project=\"labelee-ecommerce-final\", config=config, resume=\"allow\")\n",
        "\n",
        "# 3b. Setup model, optimizer, and loss\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model.to(device) # Use the model instance from the data prep phase\n",
        "optimizer = optim.AdamW(model.parameters(), lr=run.config.learning_rate)\n",
        "criterion = MultiTaskLoss()\n",
        "wandb.watch(model, criterion, log=\"all\", log_freq=100)\n",
        "\n",
        "# 3c. Check for latest checkpoint to resume\n",
        "start_epoch = 0\n",
        "best_val_loss = float('inf')\n",
        "latest_checkpoint_path = os.path.join(CHECKPOINT_DIR, 'latest_checkpoint.pth')\n",
        "if os.path.exists(latest_checkpoint_path):\n",
        "    print(\"✅ Found checkpoint. Resuming training...\")\n",
        "    checkpoint = torch.load(latest_checkpoint_path, map_location=device)\n",
        "    model.load_state_dict(checkpoint['model_state_dict'])\n",
        "    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
        "    start_epoch = checkpoint['epoch']\n",
        "    best_val_loss = checkpoint.get('best_val_loss', float('inf'))\n",
        "    print(f\"🔄 Resuming from Epoch {start_epoch + 1}\")\n",
        "else:\n",
        "    print(\"ℹ️ No checkpoint found. Starting training from scratch.\")\n",
        "\n",
        "# 3d. The Training & Validation Loop\n",
        "for epoch in range(start_epoch, run.config.epochs):\n",
        "    model.train()\n",
        "    pbar = tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{run.config.epochs} [Training]\")\n",
        "    for batch in pbar:\n",
        "        images = batch['pixel_values'].to(device)\n",
        "        input_ids = batch['input_ids'].to(device)\n",
        "        attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(images, input_ids, attention_mask, task=config[\"task\"])\n",
        "        loss, _ = criterion(outputs, None, task=config[\"task\"])\n",
        "\n",
        "        if not torch.isnan(loss):\n",
        "            loss.backward()\n",
        "            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
        "            optimizer.step()\n",
        "            wandb.log({\"train/loss\": loss.item()})\n",
        "            pbar.set_postfix(loss=loss.item())\n",
        "\n",
        "    model.eval()\n",
        "    total_val_loss = 0\n",
        "    with torch.no_grad():\n",
        "        for batch in val_loader:\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "            outputs = model(images, input_ids, attention_mask, task=config[\"task\"])\n",
        "            loss, _ = criterion(outputs, None, task=config[\"task\"])\n",
        "            total_val_loss += loss.item()\n",
        "\n",
        "    avg_val_loss = total_val_loss / len(val_loader)\n",
        "    wandb.log({\"validation/avg_loss\": avg_val_loss, \"epoch\": epoch + 1})\n",
        "    print(f\"--- End of Epoch {epoch+1}, Avg Validation Loss: {avg_val_loss:.4f} ---\")\n",
        "\n",
        "    if avg_val_loss < best_val_loss:\n",
        "        best_val_loss = avg_val_loss\n",
        "        best_model_path = os.path.join(CHECKPOINT_DIR, 'best_model.pth')\n",
        "        torch.save(model.state_dict(), best_model_path)\n",
        "        print(f\"🏆 New best model saved with validation loss: {best_val_loss:.4f}\")\n",
        "\n",
        "    torch.save({\n",
        "        'epoch': epoch + 1,\n",
        "        'model_state_dict': model.state_dict(),\n",
        "        'optimizer_state_dict': optimizer.state_dict(),\n",
        "        'best_val_loss': best_val_loss,\n",
        "    }, latest_checkpoint_path)\n",
        "\n",
        "print(\"🎉 Fine-tuning Finished!\")\n",
        "wandb.finish()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "3ffd02506b8d43a3b10d9360defb36a8",
            "0cd519e4f12d4062bafdade046f9cbab",
            "972e9b8053e14ab5a05ef6d32867e61f",
            "31ea74c684da4aad9f43664757983a94",
            "5bc9c4a374964ee3a31734b3813a058e",
            "3aa363c9c57140e8bcb0b9847d84bf57",
            "e17cb261e6d84280a67faf6598bbcb50",
            "0572b5e2c075429e9448640f67ff2548",
            "0513be367abd4960b3bda72e187b3b4f",
            "b0389cd6a4834224ab4e9d00beff8654",
            "d70e352ba20348f8980ba9ce0f5a6a96",
            "6519f483b7624a4795cba4879cecff13",
            "3a13c016ce69490da219ec99c4a9f28f",
            "ac0cea6341d24aa5a203552ed97d6b05",
            "1cf1bfca8c8d4963928b356bf5fcb4bf",
            "fa49dad5224f41d5b9614d4a1615ce7e",
            "0fb7c11cc8ac4e5aa298a35af7fa5e32",
            "afa5387f3c084e15bad06173184d2d05",
            "82bdc0fc9ad0475fa8c857a7e8595bde",
            "b209def040814c3e87424df7ae8161d1",
            "5b50561c21004a1c9c0ceb7ed67474c0",
            "b49825696ec244279832412fef6777fe",
            "5abc0bcc2f7545dfb28975399b29b3bd",
            "870935f745e34528a786613165811689",
            "ca6c438d3e6146fd977394b08022e7ca",
            "a5d0ae4e06374a45a8b7c2456a52caa3",
            "aecc28a2e644427789d00e717a9be697",
            "81d1e94ea58849e5a9bf19d825f2c25e",
            "eaa89b8368174541b9ee99738a5a6178",
            "bd74b0699b84427ca7efc2ab41df9b19",
            "48da76aee91e49d9bff7ed0981dd7709",
            "5ec312144d294f56b33f3014847f0f73",
            "1cce2633cffc401aa0ccc7da68797590",
            "918384c31139463798ee8669d4d27f75",
            "7ae9489e869142789ee0ea92c8089c80",
            "d03f4a38893e47b1b05da6ddb05eea37",
            "1affc5026a1d435988952aa6533d7411",
            "0c9bfabb766b46ca951b82efcc5cf33b",
            "1489c0ece2354ff08044c30d9b607db2",
            "e5fd6d066e934148b9335ad80b28de8e",
            "424eb6b4204446868635124dded70354",
            "1aa55b55e7bd4ee187b0c3a7e058d7cc",
            "c0779ff164ce40a19afb48d2e90f3b37",
            "10b75c2adc394108b2c5de2cdc6c22d4",
            "6435d1a92b504419aeea35793800e8f4",
            "8641b51c6f0f4746affae96c4879e661",
            "5e4a0cd1bc024c0e92b470baa48c7a58",
            "6b4d22614c3d4b7998c8d35b464a6f83",
            "6980e825c66f4101b4cef16f56590de9",
            "8d495b8aceee485ebfa2cca95bab3054",
            "272a3f4337fc455db8593aa02ea6c4b4",
            "776bcf5d7fb54ba4928ff05db91fa276",
            "8167deeb7b7248c2ad666c952df52b74",
            "f99a038ff0d140d3b20e467508802fa4",
            "69128176c09c425db1c03f5e5ecc6d05",
            "1f877a5893a24f469fcad42387f8deec",
            "ef9f1942c6e54034939a3718609c39fc",
            "81a0fd0b4ff34d7db9ce04d90a4bda2d",
            "765da528eb93445ca43cab220c0101d8",
            "7e45f2fb224743e29d8e54415d161e49",
            "f9de63d7121240cba85721b296d1c428",
            "2af473ca64ad40e1ac938188ecc0493b",
            "d44671b7f4c34da48a9728d94ca18290",
            "3f1512a538d14e8c81159c505e5eb37d",
            "fe56a95daa89485ea3ebec0b5b3cdae4",
            "b5aa0b1e7554411f8b90ca434d3fde6b",
            "438be37c79bc40a38db1d2948a5e1af6",
            "93c2243f4d494cd9ad687527565e4cb3",
            "6ec53afc0e164a678c7f6e9ffad75057",
            "e0a826557dab4bac8355765ab7f58c04",
            "c9792b4e86ca465d854ab9c521eebabd",
            "23de1ded28f741fc92a9984f08b55284",
            "2b5aac1052e148288439cc2642924c1d",
            "10df5d8958bb4a9bacc969dc8e7bdbcb",
            "fc039297b1c84c1bbe333acb9475652b",
            "ebe867b1f3c1406fb484fd35eb369d03",
            "84b39aa2337b45239e9060bdfe9da6c1",
            "bd856f06cf574cde9f9d2aefc50af643",
            "98300eeb1439414a9f45ed5fddf6b4da",
            "0eca0a3143d848768678772f10a0bd9a",
            "8a020e2a02f14d2dbde58559d70ee297",
            "c0c1620b56cd4fd494d3f60c3b7ad8c5",
            "79679edc67634a62a94b16c2c22c5ecf",
            "fe9a5acdbf0a456d9ae75c158367ce11",
            "8d54bc0a3ad34e8db944660b7bbff527",
            "d0e63a95057446dd8f559c12829411c6",
            "0431b4564f0c42ba961b9a56d812e5f4",
            "788f77a5e888405d988dd8e1c391ac92",
            "d5b25d6b18464e16a1334f7fdc99dac1",
            "eb18baf7dfbe46fdb55a3e68238181ff",
            "d799ff663d5e4e98900736d3cc4232a9",
            "7b00785ffae1483aa4a6dd5fd557fed9",
            "7ad8ed8fad8c44ca960876ef2a6e4cef",
            "2cf13aff915d449b8c3459fcd9a522a0",
            "02688bab72234a4ea7fe419e42753424",
            "a89d5b30226a41599d2d92ecdc93815b",
            "95918645d50c4159a292bad3d7033537",
            "9e67ca119ad54f499a1f6dab8af1bfd7",
            "cbd5a18cfb5c483984820c6a94194a37",
            "80f30b5ab0c94a4195432645778c2392",
            "2327368efde7445883955db5394b6492",
            "fb65298572aa4a69a204361bbc8055cc",
            "93587ec333624d129751a634da61cc24",
            "c7c83b2df73d412e86069ed6e6fd85aa",
            "82991a261ff740e98b21bbed05a7b463",
            "58f05baab7874041842b36f584db7876",
            "67ab90f1f75a4d08ac07e55d0da534f2",
            "d882a0b8a91741e382414c0538a8d677",
            "974291b74407426da4fe89eb065726a0",
            "b5606c0c6a6c4f0eb952718cebe0d9f6"
          ]
        },
        "id": "sj3qJW7Zz7I1",
        "outputId": "e59d0066-952a-4802-ed69-7cb52c748c62"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Environment is stable and all libraries are imported.\n",
            "\n",
            "PHASE 2: Preparing data pipeline...\n",
            "Labelee Foundation Model created:\n",
            "  Total parameters: 189,471,222\n",
            "  Trainable parameters: 189,471,222\n",
            "  Vision backbone: vit_base_patch16_224.augreg_in21k_ft_in1k\n",
            "  Text backbone: distilbert-base-uncased\n",
            "✅ Dataset de-duplicated. 4373 unique products remaining.\n",
            "\n",
            "PHASE 2.5: Creating DataLoaders...\n",
            "✅ Test dataset created with 438 samples and saved to 'test_dataset.pth'\n",
            "✅ Data pipeline is fully operational.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Tracking run with wandb version 0.20.1"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Run data is saved locally in <code>/content/labelee-foundation-model/wandb/run-20250626_044650-frb5jo2i</code>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Syncing run <strong><a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final/runs/frb5jo2i' target=\"_blank\">stilted-vortex-9</a></strong> to <a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/developer-guide' target=\"_blank\">docs</a>)<br>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View project at <a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final' target=\"_blank\">https://wandb.ai/olliez30-label-once/labelee-ecommerce-final</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View run at <a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final/runs/frb5jo2i' target=\"_blank\">https://wandb.ai/olliez30-label-once/labelee-ecommerce-final/runs/frb5jo2i</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ℹ️ No checkpoint found. Starting training from scratch.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 1/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3ffd02506b8d43a3b10d9360defb36a8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 1, Avg Validation Loss: 0.2669 ---\n",
            "🏆 New best model saved with validation loss: 0.2669\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 2/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6519f483b7624a4795cba4879cecff13"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 2, Avg Validation Loss: 0.1400 ---\n",
            "🏆 New best model saved with validation loss: 0.1400\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 3/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5abc0bcc2f7545dfb28975399b29b3bd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 3, Avg Validation Loss: 0.0998 ---\n",
            "🏆 New best model saved with validation loss: 0.0998\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 4/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "918384c31139463798ee8669d4d27f75"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 4, Avg Validation Loss: 0.0629 ---\n",
            "🏆 New best model saved with validation loss: 0.0629\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 5/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6435d1a92b504419aeea35793800e8f4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 5, Avg Validation Loss: 0.0437 ---\n",
            "🏆 New best model saved with validation loss: 0.0437\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 6/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1f877a5893a24f469fcad42387f8deec"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 6, Avg Validation Loss: 0.0301 ---\n",
            "🏆 New best model saved with validation loss: 0.0301\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 7/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "438be37c79bc40a38db1d2948a5e1af6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 7, Avg Validation Loss: 0.0262 ---\n",
            "🏆 New best model saved with validation loss: 0.0262\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 8/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bd856f06cf574cde9f9d2aefc50af643"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 8, Avg Validation Loss: 0.0218 ---\n",
            "🏆 New best model saved with validation loss: 0.0218\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 9/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d5b25d6b18464e16a1334f7fdc99dac1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 9, Avg Validation Loss: 0.0191 ---\n",
            "🏆 New best model saved with validation loss: 0.0191\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 10/10 [Training]:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "80f30b5ab0c94a4195432645778c2392"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- End of Epoch 10, Avg Validation Loss: 0.0158 ---\n",
            "🏆 New best model saved with validation loss: 0.0158\n",
            "🎉 Fine-tuning Finished!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<br>    <style><br>        .wandb-row {<br>            display: flex;<br>            flex-direction: row;<br>            flex-wrap: wrap;<br>            justify-content: flex-start;<br>            width: 100%;<br>        }<br>        .wandb-col {<br>            display: flex;<br>            flex-direction: column;<br>            flex-basis: 100%;<br>            flex: 1;<br>            padding: 10px;<br>        }<br>    </style><br><div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>epoch</td><td>▁▂▃▃▄▅▆▆▇█</td></tr><tr><td>train/loss</td><td>██▅▄▃▃▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>validation/avg_loss</td><td>█▄▃▂▂▁▁▁▁▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>epoch</td><td>10</td></tr><tr><td>train/loss</td><td>0.00167</td></tr><tr><td>validation/avg_loss</td><td>0.01584</td></tr></table><br/></div></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View run <strong style=\"color:#cdcd00\">stilted-vortex-9</strong> at: <a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final/runs/frb5jo2i' target=\"_blank\">https://wandb.ai/olliez30-label-once/labelee-ecommerce-final/runs/frb5jo2i</a><br> View project at: <a href='https://wandb.ai/olliez30-label-once/labelee-ecommerce-final' target=\"_blank\">https://wandb.ai/olliez30-label-once/labelee-ecommerce-final</a><br>Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Find logs at: <code>./wandb/run-20250626_044650-frb5jo2i/logs</code>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "'''\n",
        "Model Evaluation Script\n",
        "'''\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader, Dataset, Subset\n",
        "import numpy as np\n",
        "from tqdm.auto import tqdm\n",
        "import warnings\n",
        "import os\n",
        "import requests\n",
        "from PIL import Image\n",
        "import torchvision.transforms as transforms # Added for ECommerceDataset\n",
        "import math\n",
        "from typing import List, Tuple, Dict, Optional\n",
        "from transformers import AutoTokenizer, AutoModel\n",
        "import timm\n",
        "import json\n",
        "from pathlib import Path\n",
        "\n",
        "# Suppress warnings for cleaner output\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# ---\n",
        "# --- ADDED CLASS DEFINITION (This is the main fix) ---\n",
        "# ---\n",
        "# We must define the ECommerceDataset class so that torch.load knows what it is\n",
        "# when it tries to unpickle the test_dataset.pth file.\n",
        "\n",
        "class ECommerceDataset(Dataset):\n",
        "    def __init__(self, dataframe, tokenizer, transforms):\n",
        "        self.dataframe = dataframe\n",
        "        self.tokenizer = tokenizer\n",
        "        self.transforms = transforms\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataframe)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        # NOTE: This part won't be executed by the DataLoader after loading,\n",
        "        # but the class structure must be defined for unpickling to work.\n",
        "        # The important thing is that the loaded object contains the *data* itself.\n",
        "        row = self.dataframe.iloc[idx]\n",
        "        try:\n",
        "            image_url = row['images_x']\n",
        "            text = row['product_title'] + \". \" + row['description']\n",
        "            image = Image.open(requests.get(image_url, stream=True, timeout=5).raw).convert(\"RGB\")\n",
        "            pixel_values = self.transforms(image)\n",
        "            tokenized_text = self.tokenizer(text, padding=\"max_length\", truncation=True, max_length=128, return_tensors=\"pt\")\n",
        "            input_ids = tokenized_text['input_ids'].squeeze()\n",
        "            attention_mask = tokenized_text['attention_mask'].squeeze()\n",
        "            return {'pixel_values': pixel_values, 'input_ids': input_ids, 'attention_mask': attention_mask}\n",
        "        except Exception as e:\n",
        "            return self.__getitem__((idx + 1) % len(self))\n",
        "\n",
        "# ---\n",
        "# --- MODEL CLASS DEFINITIONS (Same as training) ---\n",
        "# ---\n",
        "\n",
        "class SpatialAttentionModule(nn.Module):\n",
        "    \"\"\"Novel spatial attention mechanism for image features\"\"\"\n",
        "    def __init__(self, channels: int):\n",
        "        super().__init__()\n",
        "        self.channels = channels\n",
        "        self.conv_query = nn.Conv2d(channels, channels // 4, 1)\n",
        "        self.conv_key = nn.Conv2d(channels, channels // 4, 1)\n",
        "        self.conv_value = nn.Conv2d(channels, channels, 1)\n",
        "        self.gamma = nn.Parameter(torch.zeros(1))\n",
        "        for m in [self.conv_query, self.conv_key, self.conv_value]:\n",
        "            nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
        "            if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def forward(self, x):\n",
        "        batch_size, channels, height, width = x.size()\n",
        "        query = self.conv_query(x).view(batch_size, -1, height * width).permute(0, 2, 1)\n",
        "        key = self.conv_key(x).view(batch_size, -1, height * width)\n",
        "        value = self.conv_value(x).view(batch_size, -1, height * width)\n",
        "        attention = torch.bmm(query, key)\n",
        "        attention = attention / math.sqrt(channels // 4)\n",
        "        attention = torch.clamp(attention, -5, 5)\n",
        "        attention = F.softmax(attention, dim=-1)\n",
        "        out = torch.bmm(value, attention.permute(0, 2, 1))\n",
        "        out = out.view(batch_size, channels, height, width)\n",
        "        return self.gamma * out + x\n",
        "\n",
        "class HybridImageEncoder(nn.Module):\n",
        "    \"\"\"Hybrid image encoder combining TIMM backbone with novel spatial attention\"\"\"\n",
        "    def __init__(self, model_name='vit_base_patch16_224.augreg_in21k_ft_in1k', feature_dim=768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.backbone = timm.create_model(model_name, pretrained=True, num_classes=0)\n",
        "        backbone_dim = self.backbone.embed_dim if hasattr(self.backbone, 'embed_dim') else self.backbone.num_features\n",
        "        self.spatial_attention = SpatialAttentionModule(3)\n",
        "        self.feature_projector = nn.Linear(backbone_dim, feature_dim)\n",
        "        self.refinement = nn.Sequential(\n",
        "            nn.Linear(feature_dim, feature_dim * 2),\n",
        "            nn.LayerNorm(feature_dim * 2),\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(0.1),\n",
        "            nn.Linear(feature_dim * 2, feature_dim),\n",
        "            nn.LayerNorm(feature_dim)\n",
        "        )\n",
        "        self._initialize_weights()\n",
        "\n",
        "    def _initialize_weights(self):\n",
        "        for m in [self.feature_projector] + list(self.refinement.modules()):\n",
        "            if isinstance(m, nn.Linear):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.clamp(x, -3.0, 3.0)\n",
        "        if x.shape[2] == x.shape[3]:\n",
        "            try:\n",
        "                x_attended = self.spatial_attention(x)\n",
        "                x = 0.8 * x + 0.2 * x_attended\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "        try:\n",
        "            if hasattr(self.backbone, 'forward_features'):\n",
        "                features = self.backbone.forward_features(x)\n",
        "                if len(features.shape) == 3:\n",
        "                    features = features[:, 0]\n",
        "                elif len(features.shape) == 4:\n",
        "                    features = F.adaptive_avg_pool2d(features, 1).flatten(1)\n",
        "            else:\n",
        "                features = self.backbone(x)\n",
        "        except Exception as e:\n",
        "            print(f\"Backbone error: {e}, using fallback\")\n",
        "            features = torch.randn(x.shape[0], 768, device=x.device) * 0.1\n",
        "\n",
        "        features = self.feature_projector(features)\n",
        "        refined_features = self.refinement(features)\n",
        "        return torch.clamp(refined_features, -10, 10)\n",
        "\n",
        "class HybridTextEncoder(nn.Module):\n",
        "    \"\"\"Hybrid text encoder combining Transformers backbone with novel semantic layers\"\"\"\n",
        "    def __init__(self, model_name='distilbert-base-uncased', feature_dim=768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        try:\n",
        "            self.backbone = AutoModel.from_pretrained(model_name)\n",
        "            backbone_dim = self.backbone.config.dim if hasattr(self.backbone.config, 'dim') else self.backbone.config.hidden_size\n",
        "        except:\n",
        "            from transformers import AutoConfig\n",
        "            config = AutoConfig.from_pretrained(model_name)\n",
        "            self.backbone = AutoModel.from_config(config)\n",
        "            backbone_dim = config.hidden_size\n",
        "\n",
        "        self.feature_projector = nn.Linear(backbone_dim, feature_dim)\n",
        "        self.semantic_enhancement = nn.ModuleList([self._make_semantic_layer(feature_dim) for _ in range(2)])\n",
        "        self.word_aggregator = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.context_aggregator = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.final_projection = nn.Sequential(\n",
        "            nn.Linear(feature_dim * 2, feature_dim * 2),\n",
        "            nn.LayerNorm(feature_dim * 2),\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(0.1),\n",
        "            nn.Linear(feature_dim * 2, feature_dim),\n",
        "            nn.LayerNorm(feature_dim)\n",
        "        )\n",
        "        self._initialize_weights()\n",
        "\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear) and m not in self.backbone.modules():\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def _make_semantic_layer(self, dim):\n",
        "        return nn.ModuleDict({\n",
        "            'self_attention': nn.MultiheadAttention(dim, 8, batch_first=True, dropout=0.1),\n",
        "            'feed_forward': nn.Sequential(nn.Linear(dim, dim * 2), nn.GELU(), nn.Dropout(0.1), nn.Linear(dim * 2, dim)),\n",
        "            'norm1': nn.LayerNorm(dim),\n",
        "            'norm2': nn.LayerNorm(dim)\n",
        "        })\n",
        "\n",
        "    def forward(self, input_ids, attention_mask=None):\n",
        "        try:\n",
        "            outputs = self.backbone(input_ids=input_ids, attention_mask=attention_mask)\n",
        "            if hasattr(outputs, 'last_hidden_state'):\n",
        "                hidden_states = outputs.last_hidden_state\n",
        "                if attention_mask is not None:\n",
        "                    mask_expanded = attention_mask.unsqueeze(-1).expand(hidden_states.size()).float()\n",
        "                    sum_embeddings = torch.sum(hidden_states * mask_expanded, 1)\n",
        "                    sum_mask = torch.clamp(mask_expanded.sum(1), min=1e-9)\n",
        "                    features = sum_embeddings / sum_mask\n",
        "                else:\n",
        "                    features = hidden_states.mean(1)\n",
        "            else:\n",
        "                features = outputs.pooler_output if hasattr(outputs, 'pooler_output') else outputs[0].mean(1)\n",
        "        except Exception as e:\n",
        "            print(f\"Text backbone error: {e}\")\n",
        "            batch_size = input_ids.shape[0]\n",
        "            features = torch.randn(batch_size, 768, device=input_ids.device) * 0.1\n",
        "            hidden_states = features.unsqueeze(1).expand(-1, input_ids.shape[1], -1)\n",
        "\n",
        "        features = self.feature_projector(features)\n",
        "        projected_hidden = self.feature_projector(hidden_states) if 'hidden_states' in locals() else features.unsqueeze(1)\n",
        "        enhanced_features = projected_hidden\n",
        "        key_padding_mask = ~attention_mask.bool() if attention_mask is not None else None\n",
        "\n",
        "        for layer in self.semantic_enhancement:\n",
        "            try:\n",
        "                attn_out, _ = layer['self_attention'](enhanced_features, enhanced_features, enhanced_features, key_padding_mask=key_padding_mask)\n",
        "                enhanced_features = layer['norm1'](enhanced_features + attn_out)\n",
        "                ff_out = layer['feed_forward'](enhanced_features)\n",
        "                enhanced_features = layer['norm2'](enhanced_features + ff_out)\n",
        "            except:\n",
        "                enhanced_features = layer['norm1'](enhanced_features)\n",
        "\n",
        "        try:\n",
        "            word_repr, _ = self.word_aggregator(enhanced_features, enhanced_features, enhanced_features, key_padding_mask=key_padding_mask)\n",
        "            context_repr, _ = self.context_aggregator(word_repr, word_repr, word_repr, key_padding_mask=key_padding_mask)\n",
        "            if attention_mask is not None:\n",
        "                mask_expanded = attention_mask.unsqueeze(-1).float()\n",
        "                seq_lengths = attention_mask.sum(-1, keepdim=True).clamp(min=1)\n",
        "                word_pooled = (word_repr * mask_expanded).sum(1) / seq_lengths\n",
        "                context_pooled = (context_repr * mask_expanded).sum(1) / seq_lengths\n",
        "            else:\n",
        "                word_pooled = word_repr.mean(1)\n",
        "                context_pooled = context_repr.mean(1)\n",
        "        except:\n",
        "            word_pooled = features\n",
        "            context_pooled = features\n",
        "\n",
        "        combined = torch.cat([word_pooled, context_pooled], dim=1)\n",
        "        final_features = self.final_projection(combined)\n",
        "        return torch.clamp(final_features, -10, 10)\n",
        "\n",
        "class CrossModalFusionNetwork(nn.Module):\n",
        "    \"\"\"Enhanced cross-modal fusion with interactive attention and stability improvements\"\"\"\n",
        "    def __init__(self, feature_dim: int = 768):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.vision_to_text = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.text_to_vision = nn.MultiheadAttention(feature_dim, 8, batch_first=True, dropout=0.1)\n",
        "        self.interactive_fusion = nn.Sequential(\n",
        "            nn.Linear(feature_dim * 4, feature_dim * 2),\n",
        "            nn.LayerNorm(feature_dim * 2),\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(0.2),\n",
        "            nn.Linear(feature_dim * 2, feature_dim),\n",
        "            nn.LayerNorm(feature_dim)\n",
        "        )\n",
        "        self.vision_refine = nn.Linear(feature_dim, feature_dim)\n",
        "        self.text_refine = nn.Linear(feature_dim, feature_dim)\n",
        "        self.fusion_gate = nn.Sequential(nn.Linear(feature_dim * 2, feature_dim), nn.Sigmoid())\n",
        "        self._initialize_weights()\n",
        "\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def forward(self, vision_features, text_features):\n",
        "        vision_features = torch.clamp(vision_features, -10, 10)\n",
        "        text_features = torch.clamp(text_features, -10, 10)\n",
        "        vision_expanded = vision_features.unsqueeze(1)\n",
        "        text_expanded = text_features.unsqueeze(1)\n",
        "\n",
        "        try:\n",
        "            v2t_attended, _ = self.vision_to_text(vision_expanded, text_expanded, text_expanded)\n",
        "            v2t_attended = torch.clamp(v2t_attended.squeeze(1), -5, 5)\n",
        "        except:\n",
        "            v2t_attended = vision_features\n",
        "\n",
        "        try:\n",
        "            t2v_attended, _ = self.text_to_vision(text_expanded, vision_expanded, vision_expanded)\n",
        "            t2v_attended = torch.clamp(t2v_attended.squeeze(1), -5, 5)\n",
        "        except:\n",
        "            t2v_attended = text_features\n",
        "\n",
        "        fused_features = torch.cat([vision_features, text_features, v2t_attended, t2v_attended], dim=1)\n",
        "        interactive_output = self.interactive_fusion(fused_features)\n",
        "        gate_input = torch.cat([vision_features, text_features], dim=1)\n",
        "        fusion_weight = self.fusion_gate(gate_input)\n",
        "        refined_vision = self.vision_refine(vision_features + fusion_weight * interactive_output)\n",
        "        refined_text = self.text_refine(text_features + (1 - fusion_weight) * interactive_output)\n",
        "        return refined_vision, refined_text, interactive_output\n",
        "\n",
        "class LabeleeFoundation(nn.Module):\n",
        "    \"\"\"Re-architected Labelee Foundation Model for pre-training\"\"\"\n",
        "    def __init__(self, vision_model_name='vit_base_patch16_224.augreg_in21k_ft_in1k', text_model_name='distilbert-base-uncased', feature_dim=768, num_classes=1000):\n",
        "        super().__init__()\n",
        "        self.feature_dim = feature_dim\n",
        "        self.image_encoder = HybridImageEncoder(vision_model_name, feature_dim)\n",
        "        self.text_encoder = HybridTextEncoder(text_model_name, feature_dim)\n",
        "        self.fusion_network = CrossModalFusionNetwork(feature_dim)\n",
        "        self.similarity_head = nn.Sequential(\n",
        "            nn.Linear(feature_dim, feature_dim // 2),\n",
        "            nn.LayerNorm(feature_dim // 2),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.1),\n",
        "            nn.Linear(feature_dim // 2, 1)\n",
        "        )\n",
        "        self.classification_head = nn.Sequential(\n",
        "            nn.Linear(feature_dim, feature_dim // 2),\n",
        "            nn.LayerNorm(feature_dim // 2),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.1),\n",
        "            nn.Linear(feature_dim // 2, num_classes)\n",
        "        )\n",
        "        self.contrastive_head = nn.Sequential(\n",
        "            nn.Linear(feature_dim, feature_dim),\n",
        "            nn.LayerNorm(feature_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(feature_dim, feature_dim // 2)\n",
        "        )\n",
        "        self.vision_reconstruction = nn.Linear(feature_dim, feature_dim)\n",
        "        self.text_reconstruction = nn.Linear(feature_dim, feature_dim)\n",
        "        self._initialize_weights()\n",
        "\n",
        "    def _initialize_weights(self):\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Linear) and not any(m in encoder.modules() for encoder in [self.image_encoder.backbone, self.text_encoder.backbone]):\n",
        "                nn.init.normal_(m.weight, std=0.02)\n",
        "                if m.bias is not None: nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def forward(self, images, input_ids, attention_mask=None, task='similarity', return_features=False):\n",
        "        try:\n",
        "            vision_features = self.image_encoder(images)\n",
        "        except Exception as e:\n",
        "            print(f\"Vision encoder error: {e}\")\n",
        "            vision_features = torch.randn(images.shape[0], self.feature_dim, device=images.device) * 0.1\n",
        "\n",
        "        try:\n",
        "            text_features = self.text_encoder(input_ids, attention_mask)\n",
        "        except Exception as e:\n",
        "            print(f\"Text encoder error: {e}\")\n",
        "            text_features = torch.randn(input_ids.shape[0], self.feature_dim, device=input_ids.device) * 0.1\n",
        "\n",
        "        fused_vision, fused_text, interactive_features = self.fusion_network(vision_features, text_features)\n",
        "\n",
        "        if task == 'contrastive':\n",
        "            vision_proj = self.contrastive_head(fused_vision)\n",
        "            text_proj = self.contrastive_head(fused_text)\n",
        "            return vision_proj, text_proj\n",
        "\n",
        "        return fused_vision, fused_text\n",
        "\n",
        "# ---\n",
        "# --- DUMMY DATASET FOR TESTING ---\n",
        "# ---\n",
        "\n",
        "class DummyDataset(Dataset):\n",
        "    \"\"\"Create a dummy dataset for testing when real data is not available\"\"\"\n",
        "    def __init__(self, size=100):\n",
        "        self.size = size\n",
        "\n",
        "    def __len__(self):\n",
        "        return self.size\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        # Create dummy image data (3, 224, 224)\n",
        "        pixel_values = torch.randn(3, 224, 224)\n",
        "\n",
        "        # Create dummy text data\n",
        "        input_ids = torch.randint(1, 1000, (32,))  # Random token IDs\n",
        "        attention_mask = torch.ones(32)\n",
        "\n",
        "        return {\n",
        "            'pixel_values': pixel_values,\n",
        "            'input_ids': input_ids,\n",
        "            'attention_mask': attention_mask\n",
        "        }\n",
        "\n",
        "# ---\n",
        "# --- COMPREHENSIVE RETRIEVAL EVALUATION ---\n",
        "# ---\n",
        "\n",
        "def calculate_retrieval_metrics(similarity_matrix, k_values=[1, 5, 10]):\n",
        "    \"\"\"Calculate comprehensive retrieval metrics\"\"\"\n",
        "    num_samples = similarity_matrix.shape[0]\n",
        "\n",
        "    # Get sorted indices (highest similarity first)\n",
        "    _, sorted_indices = torch.sort(similarity_matrix, dim=1, descending=True)\n",
        "\n",
        "    # Ground truth: each image matches its corresponding text (diagonal)\n",
        "    ground_truth = torch.arange(num_samples)\n",
        "\n",
        "    metrics = {}\n",
        "\n",
        "    # Calculate Recall@K and Precision@K\n",
        "    for k in k_values:\n",
        "        top_k_indices = sorted_indices[:, :k]\n",
        "\n",
        "        # Recall@K: proportion of relevant items found in top-k\n",
        "        correct_in_topk = (top_k_indices == ground_truth.view(-1, 1)).any(dim=1)\n",
        "        recall_at_k = correct_in_topk.float().mean().item()\n",
        "\n",
        "        # Precision@K: proportion of top-k that are relevant\n",
        "        precision_at_k = correct_in_topk.float().mean().item()  # Same as recall for single relevant item\n",
        "\n",
        "        # Ensure these are Python float, not numpy.float32\n",
        "        metrics[f'Recall@{k}'] = float(recall_at_k)\n",
        "        metrics[f'Precision@{k}'] = float(precision_at_k)\n",
        "\n",
        "    # Calculate Mean Reciprocal Rank (MRR)\n",
        "    reciprocal_ranks = []\n",
        "    for i in range(num_samples):\n",
        "        # Find the rank of the correct item\n",
        "        correct_item_rank = (sorted_indices[i] == ground_truth[i]).nonzero(as_tuple=True)[0]\n",
        "        if len(correct_item_rank) > 0:\n",
        "            rank = correct_item_rank[0].item() + 1  # Convert to 1-indexed\n",
        "            reciprocal_ranks.append(1.0 / rank)\n",
        "        else:\n",
        "            reciprocal_ranks.append(0.0)\n",
        "\n",
        "    metrics['MRR'] = float(np.mean(reciprocal_ranks))  # Ensure Python float\n",
        "\n",
        "    # Calculate Mean Average Precision (MAP)\n",
        "    # For single relevant item per query, MAP = MRR\n",
        "    metrics['MAP'] = metrics['MRR']\n",
        "\n",
        "    # Calculate NDCG@K\n",
        "    for k in k_values:\n",
        "        ndcg_scores = []\n",
        "        for i in range(num_samples):\n",
        "            # Get relevance scores (1 for correct match, 0 for others)\n",
        "            relevance = torch.zeros(k)\n",
        "            correct_positions = (sorted_indices[i][:k] == ground_truth[i]).nonzero(as_tuple=True)[0]\n",
        "            if len(correct_positions) > 0:\n",
        "                relevance[correct_positions[0]] = 1.0\n",
        "\n",
        "            # Calculate DCG\n",
        "            dcg = 0.0\n",
        "            for j in range(k):\n",
        "                if relevance[j] > 0:\n",
        "                    dcg += relevance[j] / np.log2(j + 2)  # j+2 because log2(1) = 0\n",
        "\n",
        "            # Calculate IDCG (ideal DCG) - for single relevant item, IDCG = 1\n",
        "            idcg = 1.0\n",
        "\n",
        "            # Calculate NDCG\n",
        "            ndcg = dcg / idcg if idcg > 0 else 0.0\n",
        "            ndcg_scores.append(ndcg)\n",
        "\n",
        "        metrics[f'NDCG@{k}'] = float(np.mean(ndcg_scores))  # Ensure Python float\n",
        "\n",
        "    return metrics\n",
        "\n",
        "def evaluate_model_comprehensive(model, test_loader, device):\n",
        "    \"\"\"Comprehensive evaluation of the model\"\"\"\n",
        "    print(\"Starting comprehensive model evaluation...\")\n",
        "\n",
        "    model.eval()\n",
        "    all_vision_embeddings = []\n",
        "    all_text_embeddings = []\n",
        "\n",
        "    # Generate embeddings\n",
        "    with torch.no_grad():\n",
        "        for batch in tqdm(test_loader, desc=\"Generating Embeddings\"):\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "            # Get the projected features for contrastive task\n",
        "            vision_proj, text_proj = model(images, input_ids, attention_mask, task='contrastive')\n",
        "\n",
        "            all_vision_embeddings.append(vision_proj.cpu())\n",
        "            all_text_embeddings.append(text_proj.cpu())\n",
        "\n",
        "    # Concatenate all embeddings\n",
        "    vision_embeddings = torch.cat(all_vision_embeddings, dim=0)\n",
        "    text_embeddings = torch.cat(all_text_embeddings, dim=0)\n",
        "\n",
        "    # Normalize embeddings for cosine similarity\n",
        "    vision_embeddings = F.normalize(vision_embeddings, p=2, dim=1)\n",
        "    text_embeddings = F.normalize(text_embeddings, p=2, dim=1)\n",
        "\n",
        "    # Calculate similarity matrices\n",
        "    i2t_similarity = vision_embeddings @ text_embeddings.T  # Image-to-Text\n",
        "    t2i_similarity = text_embeddings @ vision_embeddings.T  # Text-to-Image\n",
        "\n",
        "    # Calculate metrics\n",
        "    k_values = [1, 3, 5, 10]\n",
        "\n",
        "    print(\"\\n\" + \"=\"*80)\n",
        "    print(\"COMPREHENSIVE RETRIEVAL EVALUATION RESULTS\")\n",
        "    print(\"=\"*80)\n",
        "\n",
        "    # Image-to-Text Retrieval\n",
        "    print(\"\\n📸➡️📝 IMAGE-TO-TEXT RETRIEVAL:\")\n",
        "    print(\"-\" * 40)\n",
        "    i2t_metrics = calculate_retrieval_metrics(i2t_similarity, k_values)\n",
        "    for metric, value in i2t_metrics.items():\n",
        "        print(f\"{metric:>12}: {value:.4f}\")\n",
        "\n",
        "    # Text-to-Image Retrieval\n",
        "    print(\"\\n📝➡️📸 TEXT-TO-IMAGE RETRIEVAL:\")\n",
        "    print(\"-\" * 40)\n",
        "    t2i_metrics = calculate_retrieval_metrics(t2i_similarity, k_values)\n",
        "    for metric, value in t2i_metrics.items():\n",
        "        print(f\"{metric:>12}: {value:.4f}\")\n",
        "\n",
        "    # Overall Performance Summary\n",
        "    print(\"\\n🎯 OVERALL PERFORMANCE SUMMARY:\")\n",
        "    print(\"-\" * 40)\n",
        "    avg_recall_1 = (i2t_metrics['Recall@1'] + t2i_metrics['Recall@1']) / 2\n",
        "    avg_recall_5 = (i2t_metrics['Recall@5'] + t2i_metrics['Recall@5']) / 2\n",
        "    avg_mrr = (i2t_metrics['MRR'] + t2i_metrics['MRR']) / 2\n",
        "\n",
        "    print(f\"{'Avg Recall@1':>12}: {avg_recall_1:.4f}\")\n",
        "    print(f\"{'Avg Recall@5':>12}: {avg_recall_5:.4f}\")\n",
        "    print(f\"{'Avg MRR':>12}: {avg_mrr:.4f}\")\n",
        "\n",
        "    # Performance Analysis\n",
        "    print(f\"\\n📊 PERFORMANCE ANALYSIS:\")\n",
        "    print(\"-\" * 40)\n",
        "    if avg_recall_1 >= 0.8:\n",
        "        print(\"🎉 EXCELLENT: Model shows strong cross-modal understanding!\")\n",
        "    elif avg_recall_1 >= 0.6:\n",
        "        print(\"✅ GOOD: Model demonstrates solid retrieval capabilities!\")\n",
        "    elif avg_recall_1 >= 0.4:\n",
        "        print(\"⚠️  MODERATE: Model needs improvement for better retrieval!\")\n",
        "    else:\n",
        "        print(\"❌ POOR: Model requires significant improvements!\")\n",
        "\n",
        "    print(\"=\"*80)\n",
        "\n",
        "    return {\n",
        "        'i2t_metrics': i2t_metrics,\n",
        "        't2i_metrics': t2i_metrics,\n",
        "        'avg_metrics': {\n",
        "            'avg_recall_1': avg_recall_1,\n",
        "            'avg_recall_5': avg_recall_5,\n",
        "            'avg_mrr': avg_mrr\n",
        "        }\n",
        "    }\n",
        "\n",
        "# ---\n",
        "# --- FLEXIBLE MODEL LOADING ---\n",
        "# ---\n",
        "\n",
        "def find_model_checkpoint(search_paths=None):\n",
        "    \"\"\"Find model checkpoint in various possible locations\"\"\"\n",
        "    if search_paths is None:\n",
        "        search_paths = [\n",
        "            'best_model.pth',\n",
        "            'model.pth',\n",
        "            'checkpoint.pth',\n",
        "            'labelee_model.pth',\n",
        "            './checkpoints/best_model.pth',\n",
        "            './models/best_model.pth',\n",
        "            '/content/drive/My Drive/labelee_checkpoints/best_model.pth',\n",
        "            '/content/drive/MyDrive/labelee_checkpoints/best_model.pth',\n",
        "            os.path.expanduser('~/labelee_checkpoints/best_model.pth')\n",
        "        ]\n",
        "\n",
        "    for path in search_paths:\n",
        "        if os.path.exists(path):\n",
        "            return path\n",
        "\n",
        "    return None\n",
        "\n",
        "def load_model_with_fallback(model, device, custom_path=None):\n",
        "    \"\"\"Load model with multiple fallback options\"\"\"\n",
        "    if custom_path and os.path.exists(custom_path):\n",
        "        try:\n",
        "            model.load_state_dict(torch.load(custom_path, map_location=device))\n",
        "            print(f\"✅ Successfully loaded model from: {custom_path}\")\n",
        "            return True\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Failed to load from custom path: {e}\")\n",
        "\n",
        "    # Try to find checkpoint automatically\n",
        "    checkpoint_path = find_model_checkpoint()\n",
        "    if checkpoint_path:\n",
        "        try:\n",
        "            model.load_state_dict(torch.load(checkpoint_path, map_location=device))\n",
        "            print(f\"✅ Successfully loaded model from: {checkpoint_path}\")\n",
        "            return True\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Failed to load checkpoint: {e}\")\n",
        "\n",
        "    print(\"⚠️  No trained model found. Using randomly initialized model for demonstration.\")\n",
        "    print(\"Note: Results will not be meaningful without trained weights.\")\n",
        "    return False\n",
        "\n",
        "def load_test_dataset():\n",
        "    \"\"\"Load test dataset with fallback to dummy data\"\"\"\n",
        "    possible_paths = [\n",
        "        'test_dataset.pth',\n",
        "        'test_data.pth',\n",
        "        './data/test_dataset.pth',\n",
        "        './datasets/test_dataset.pth'\n",
        "    ]\n",
        "\n",
        "    for path in possible_paths:\n",
        "        if os.path.exists(path):\n",
        "            try:\n",
        "                # Option 1: Use weights_only=False (if you trust the source)\n",
        "                dataset = torch.load(path, map_location=torch.device('cpu'), weights_only=False)\n",
        "                print(f\"✅ Successfully loaded test dataset from: {path}\")\n",
        "                return dataset, DataLoader(dataset, batch_size=32, shuffle=False)\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Failed to load dataset from {path}: {e}\")\n",
        "\n",
        "                # Option 2: Try with pickle_module parameter\n",
        "                try:\n",
        "                    import pickle\n",
        "                    dataset = torch.load(path, map_location=torch.device('cpu'),\n",
        "                                       pickle_module=pickle, weights_only=False)\n",
        "                    print(f\"✅ Successfully loaded test dataset from: {path} (with pickle)\")\n",
        "                    return dataset, DataLoader(dataset, batch_size=32, shuffle=False)\n",
        "                except Exception as e2:\n",
        "                    print(f\"❌ Also failed with pickle: {e2}\")\n",
        "                    continue\n",
        "\n",
        "    print(\"⚠️  No test dataset found. Creating dummy dataset for demonstration.\")\n",
        "    dummy_dataset = DummyDataset(size=100)\n",
        "    dummy_loader = DataLoader(dummy_dataset, batch_size=32, shuffle=False)\n",
        "    return dummy_dataset, dummy_loader\n",
        "\n",
        "# ---\n",
        "# --- MAIN EVALUATION PIPELINE ---\n",
        "# ---\n",
        "\n",
        "def convert_numpy_types(obj):\n",
        "    \"\"\"Recursively convert numpy types to native Python types for JSON serialization\"\"\"\n",
        "    if isinstance(obj, dict):\n",
        "        return {key: convert_numpy_types(value) for key, value in obj.items()}\n",
        "    elif isinstance(obj, list):\n",
        "        return [convert_numpy_types(item) for item in obj]\n",
        "    elif isinstance(obj, tuple):\n",
        "        return tuple(convert_numpy_types(item) for item in obj)\n",
        "    elif isinstance(obj, np.integer):\n",
        "        return int(obj)\n",
        "    elif isinstance(obj, np.floating):\n",
        "        return float(obj)\n",
        "    elif isinstance(obj, np.ndarray):\n",
        "        return obj.tolist()\n",
        "    elif isinstance(obj, (np.bool_, bool)):\n",
        "        return bool(obj)\n",
        "    else:\n",
        "        return obj\n",
        "\n",
        "# Alternative: Custom JSON encoder\n",
        "class NumpyEncoder(json.JSONEncoder):\n",
        "    \"\"\"Custom JSON encoder that handles numpy types\"\"\"\n",
        "    def default(self, obj):\n",
        "        if isinstance(obj, np.integer):\n",
        "            return int(obj)\n",
        "        elif isinstance(obj, np.floating):\n",
        "            return float(obj)\n",
        "        elif isinstance(obj, np.ndarray):\n",
        "            return obj.tolist()\n",
        "        elif isinstance(obj, (np.bool_, bool)):\n",
        "            return bool(obj)\n",
        "        return super().default(obj)\n",
        "\n",
        "\n",
        "def main(model_path=None):\n",
        "    \"\"\"Main evaluation pipeline with enhanced error handling\"\"\"\n",
        "    # Setup\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    print(f\"🚀 Using device: {device}\")\n",
        "\n",
        "    # Initialize model\n",
        "    print(\"\\n🔄 PHASE 1: Initializing model...\")\n",
        "    model = LabeleeFoundation()\n",
        "    model.to(device)\n",
        "\n",
        "    # Load trained weights\n",
        "    print(\"\\n🔄 PHASE 2: Loading model weights...\")\n",
        "    model_loaded = load_model_with_fallback(model, device, model_path)\n",
        "\n",
        "    # Load test dataset\n",
        "    print(\"\\n🔄 PHASE 3: Loading test dataset...\")\n",
        "    test_dataset, test_loader = load_test_dataset()\n",
        "    print(f\"Using dataset with {len(test_dataset)} samples\")\n",
        "\n",
        "    # Run evaluation\n",
        "    print(\"\\n🔄 PHASE 4: Running comprehensive evaluation...\")\n",
        "    try:\n",
        "        results = evaluate_model_comprehensive(model, test_loader, device)\n",
        "\n",
        "        # Save results with proper type conversion\n",
        "        results_path = 'evaluation_results.json'\n",
        "\n",
        "        # Method 1: Using convert_numpy_types function\n",
        "        converted_results = convert_numpy_types(results)\n",
        "        with open(results_path, 'w') as f:\n",
        "            json.dump(converted_results, f, indent=2)\n",
        "\n",
        "        # Method 2: Alternative using custom encoder (comment out method 1 if using this)\n",
        "        # with open(results_path, 'w') as f:\n",
        "        #     json.dump(results, f, indent=2, cls=NumpyEncoder)\n",
        "\n",
        "        print(f\"\\n💾 Results saved to: {results_path}\")\n",
        "\n",
        "        print(\"\\n🎊 Evaluation completed successfully!\")\n",
        "        return results\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ ERROR during evaluation: {e}\")\n",
        "        import traceback\n",
        "        traceback.print_exc()\n",
        "        return None\n",
        "\n",
        "def interactive_evaluation():\n",
        "    \"\"\"Interactive evaluation with user input\"\"\"\n",
        "    print(\"🔍 LABELEE MODEL EVALUATION TOOL\")\n",
        "    print(\"=\"*50)\n",
        "\n",
        "    # Ask for model path\n",
        "    model_path = input(\"\\nEnter model checkpoint path (press Enter to auto-search): \").strip()\n",
        "    if not model_path:\n",
        "        model_path = None\n",
        "\n",
        "    # Run evaluation\n",
        "    results = main(model_path)\n",
        "\n",
        "    if results:\n",
        "        print(\"\\n✨ Evaluation Summary:\")\n",
        "        avg_metrics = results['avg_metrics']\n",
        "        print(f\"Average Recall@1: {avg_metrics['avg_recall_1']:.4f}\")\n",
        "        print(f\"Average Recall@5: {avg_metrics['avg_recall_5']:.4f}\")\n",
        "        print(f\"Average MRR: {avg_metrics['avg_mrr']:.4f}\")\n",
        "\n",
        "    return results\n",
        "\n",
        "# ---\n",
        "# --- ADDITIONAL EVALUATION UTILITIES ---\n",
        "# ---\n",
        "\n",
        "def analyze_model_architecture(model):\n",
        "    \"\"\"Analyze and report model architecture details\"\"\"\n",
        "    print(\"\\n🏗️  MODEL ARCHITECTURE ANALYSIS:\")\n",
        "    print(\"-\" * 50)\n",
        "\n",
        "    total_params = sum(p.numel() for p in model.parameters())\n",
        "    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "\n",
        "    print(f\"Total Parameters: {total_params:,}\")\n",
        "    print(f\"Trainable Parameters: {trainable_params:,}\")\n",
        "    print(f\"Model Size: {total_params * 4 / 1024 / 1024:.2f} MB (FP32)\")\n",
        "\n",
        "    # Component breakdown\n",
        "    components = {\n",
        "        'Image Encoder': sum(p.numel() for p in model.image_encoder.parameters()),\n",
        "        'Text Encoder': sum(p.numel() for p in model.text_encoder.parameters()),\n",
        "        'Fusion Network': sum(p.numel() for p in model.fusion_network.parameters()),\n",
        "        'Task Heads': sum(p.numel() for p in model.similarity_head.parameters()) +\n",
        "                     sum(p.numel() for p in model.classification_head.parameters()) +\n",
        "                     sum(p.numel() for p in model.contrastive_head.parameters())\n",
        "    }\n",
        "\n",
        "    print(\"\\nComponent Breakdown:\")\n",
        "    for name, params in components.items():\n",
        "        percentage = (params / total_params) * 100\n",
        "        print(f\"  {name}: {params:,} ({percentage:.1f}%)\")\n",
        "\n",
        "def benchmark_inference_speed(model, test_loader, device, num_batches=10):\n",
        "    \"\"\"Benchmark model inference speed\"\"\"\n",
        "    print(\"\\n⚡ INFERENCE SPEED BENCHMARK:\")\n",
        "    print(\"-\" * 40)\n",
        "\n",
        "    model.eval()\n",
        "    import time\n",
        "\n",
        "    times = []\n",
        "    with torch.no_grad():\n",
        "        for i, batch in enumerate(test_loader):\n",
        "            if i >= num_batches:\n",
        "                break\n",
        "\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "            start_time = time.time()\n",
        "            _ = model(images, input_ids, attention_mask, task='contrastive')\n",
        "            end_time = time.time()\n",
        "\n",
        "            batch_time = end_time - start_time\n",
        "            times.append(batch_time)\n",
        "\n",
        "    avg_time = np.mean(times)\n",
        "    batch_size = images.shape[0]\n",
        "    samples_per_second = batch_size / avg_time\n",
        "\n",
        "    print(f\"Average batch time: {avg_time:.4f} seconds\")\n",
        "    print(f\"Samples per second: {samples_per_second:.2f}\")\n",
        "    print(f\"Time per sample: {avg_time/batch_size:.4f} seconds\")\n",
        "\n",
        "def visualize_similarity_distribution(vision_embeddings, text_embeddings):\n",
        "    \"\"\"Analyze similarity score distributions\"\"\"\n",
        "    print(\"\\n📊 SIMILARITY DISTRIBUTION ANALYSIS:\")\n",
        "    print(\"-\" * 45)\n",
        "\n",
        "    # Calculate all pairwise similarities\n",
        "    similarity_matrix = vision_embeddings @ text_embeddings.T\n",
        "\n",
        "    # Diagonal (correct matches)\n",
        "    correct_similarities = torch.diag(similarity_matrix).numpy()\n",
        "\n",
        "    # Off-diagonal (incorrect matches)\n",
        "    mask = torch.eye(similarity_matrix.shape[0], dtype=torch.bool)\n",
        "    incorrect_similarities = similarity_matrix[~mask].numpy()\n",
        "\n",
        "    print(f\"Correct match similarities - Mean: {np.mean(correct_similarities):.4f}, Std: {np.std(correct_similarities):.4f}\")\n",
        "    print(f\"Incorrect match similarities - Mean: {np.mean(incorrect_similarities):.4f}, Std: {np.std(incorrect_similarities):.4f}\")\n",
        "    print(f\"Separation margin: {np.mean(correct_similarities) - np.mean(incorrect_similarities):.4f}\")\n",
        "\n",
        "def detailed_error_analysis(model, test_loader, device, num_samples=50):\n",
        "    \"\"\"Perform detailed error analysis on failed retrievals\"\"\"\n",
        "    print(\"\\n🔍 DETAILED ERROR ANALYSIS:\")\n",
        "    print(\"-\" * 35)\n",
        "\n",
        "    model.eval()\n",
        "    all_vision_embeddings = []\n",
        "    all_text_embeddings = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for i, batch in enumerate(test_loader):\n",
        "            if i * batch['pixel_values'].shape[0] >= num_samples:\n",
        "                break\n",
        "\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "            vision_proj, text_proj = model(images, input_ids, attention_mask, task='contrastive')\n",
        "\n",
        "            all_vision_embeddings.append(vision_proj.cpu())\n",
        "            all_text_embeddings.append(text_proj.cpu())\n",
        "\n",
        "    vision_embeddings = torch.cat(all_vision_embeddings, dim=0)[:num_samples]\n",
        "    text_embeddings = torch.cat(all_text_embeddings, dim=0)[:num_samples]\n",
        "\n",
        "    # Normalize embeddings\n",
        "    vision_embeddings = F.normalize(vision_embeddings, p=2, dim=1)\n",
        "    text_embeddings = F.normalize(text_embeddings, p=2, dim=1)\n",
        "\n",
        "    # Calculate similarity matrix\n",
        "    similarity_matrix = vision_embeddings @ text_embeddings.T\n",
        "\n",
        "    # Find failed retrievals (where correct match is not rank 1)\n",
        "    _, sorted_indices = torch.sort(similarity_matrix, dim=1, descending=True)\n",
        "    ground_truth = torch.arange(len(vision_embeddings))\n",
        "\n",
        "    failed_retrievals = []\n",
        "    for i in range(len(vision_embeddings)):\n",
        "        if sorted_indices[i, 0] != ground_truth[i]:\n",
        "            failed_retrievals.append({\n",
        "                'query_idx': i,\n",
        "                'predicted_idx': sorted_indices[i, 0].item(),\n",
        "                'correct_idx': ground_truth[i].item(),\n",
        "                'correct_similarity': similarity_matrix[i, ground_truth[i]].item(),\n",
        "                'predicted_similarity': similarity_matrix[i, sorted_indices[i, 0]].item(),\n",
        "                'rank_of_correct': ((sorted_indices[i] == ground_truth[i]).nonzero(as_tuple=True)[0][0] + 1).item()\n",
        "            })\n",
        "\n",
        "    if failed_retrievals:\n",
        "        print(f\"Failed retrievals: {len(failed_retrievals)}/{num_samples} ({len(failed_retrievals)/num_samples*100:.1f}%)\")\n",
        "        print(f\"Average rank of correct match in failures: {np.mean([f['rank_of_correct'] for f in failed_retrievals]):.2f}\")\n",
        "        print(f\"Average similarity gap: {np.mean([f['predicted_similarity'] - f['correct_similarity'] for f in failed_retrievals]):.4f}\")\n",
        "    else:\n",
        "        print(\"🎉 No failed retrievals found in sample!\")\n",
        "\n",
        "def export_embeddings(model, test_loader, device, output_path='embeddings.npz'):\n",
        "    \"\"\"Export model embeddings for external analysis\"\"\"\n",
        "    print(f\"\\n💾 EXPORTING EMBEDDINGS to {output_path}:\")\n",
        "    print(\"-\" * 40)\n",
        "\n",
        "    model.eval()\n",
        "    all_vision_embeddings = []\n",
        "    all_text_embeddings = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in tqdm(test_loader, desc=\"Extracting embeddings\"):\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "            vision_proj, text_proj = model(images, input_ids, attention_mask, task='contrastive')\n",
        "\n",
        "            all_vision_embeddings.append(vision_proj.cpu().numpy())\n",
        "            all_text_embeddings.append(text_proj.cpu().numpy())\n",
        "\n",
        "    vision_embeddings = np.concatenate(all_vision_embeddings, axis=0)\n",
        "    text_embeddings = np.concatenate(all_text_embeddings, axis=0)\n",
        "\n",
        "    np.savez(output_path,\n",
        "             vision_embeddings=vision_embeddings,\n",
        "             text_embeddings=text_embeddings)\n",
        "\n",
        "    print(f\"✅ Exported {len(vision_embeddings)} vision and text embedding pairs\")\n",
        "\n",
        "def comprehensive_evaluation_suite(model, test_loader, device, save_embeddings=False):\n",
        "    \"\"\"Run the complete evaluation suite\"\"\"\n",
        "    print(\"\\n🚀 COMPREHENSIVE EVALUATION SUITE\")\n",
        "    print(\"=\"*60)\n",
        "\n",
        "    # 1. Architecture Analysis\n",
        "    analyze_model_architecture(model)\n",
        "\n",
        "    # 2. Speed Benchmark\n",
        "    benchmark_inference_speed(model, test_loader, device)\n",
        "\n",
        "    # 3. Main Retrieval Evaluation\n",
        "    results = evaluate_model_comprehensive(model, test_loader, device)\n",
        "\n",
        "    # 4. Generate embeddings for additional analysis\n",
        "    print(\"\\n🔄 Generating embeddings for detailed analysis...\")\n",
        "    model.eval()\n",
        "    all_vision_embeddings = []\n",
        "    all_text_embeddings = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for batch in tqdm(test_loader, desc=\"Extracting embeddings\"):\n",
        "            images = batch['pixel_values'].to(device)\n",
        "            input_ids = batch['input_ids'].to(device)\n",
        "            attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "            vision_proj, text_proj = model(images, input_ids, attention_mask, task='contrastive')\n",
        "\n",
        "            all_vision_embeddings.append(vision_proj.cpu())\n",
        "            all_text_embeddings.append(text_proj.cpu())\n",
        "\n",
        "    vision_embeddings = torch.cat(all_vision_embeddings, dim=0)\n",
        "    text_embeddings = torch.cat(all_text_embeddings, dim=0)\n",
        "\n",
        "    # Normalize embeddings\n",
        "    vision_embeddings = F.normalize(vision_embeddings, p=2, dim=1)\n",
        "    text_embeddings = F.normalize(text_embeddings, p=2, dim=1)\n",
        "\n",
        "    # 5. Similarity Distribution Analysis\n",
        "    visualize_similarity_distribution(vision_embeddings, text_embeddings)\n",
        "\n",
        "    # 6. Error Analysis\n",
        "    detailed_error_analysis(model, test_loader, device)\n",
        "\n",
        "    # 7. Export embeddings if requested\n",
        "    if save_embeddings:\n",
        "        export_embeddings(model, test_loader, device)\n",
        "\n",
        "    return results\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # You can run different evaluation modes:\n",
        "\n",
        "    # 1. Basic evaluation\n",
        "    # results = main()\n",
        "\n",
        "    # 2. Interactive evaluation\n",
        "    results = interactive_evaluation()\n",
        "\n",
        "    # 3. Comprehensive evaluation suite\n",
        "    # results = main()\n",
        "    # if results:\n",
        "    #     comprehensive_evaluation_suite(model, test_loader, device, save_embeddings=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "5d309642ca774cea836e63ab16c2adc3",
            "db3ad98d23c94d05986866249b2fe7dc",
            "b7ce691dfdfe4aef83ee60a96d45421c",
            "1d68dc78411f44e4ac0bd6277aa8e900",
            "5657db2712ba49a49522e034ff511f86",
            "f904c20a4a1b46d6b18a7757d1a8f7df",
            "c8e3b4a767074852b8286d28420cfa8a",
            "ab407fca90d9435f9363eb50d8867814",
            "da154bedc3714f5aa5d34d8e52360620",
            "c8f39e78c8a24217978391ce19c78e2f",
            "bf73791c71574720826e93395779e150"
          ]
        },
        "collapsed": true,
        "id": "tIFnVo3kCxwH",
        "outputId": "3c9e5f63-5078-4d41-daba-0141501e679a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 LABELEE MODEL EVALUATION TOOL\n",
            "==================================================\n",
            "\n",
            "Enter model checkpoint path (press Enter to auto-search): /content/drive/My Drive/labelee_checkpoints/best_model.pth\n",
            "🚀 Using device: cuda\n",
            "\n",
            "🔄 PHASE 1: Initializing model...\n",
            "\n",
            "🔄 PHASE 2: Loading model weights...\n",
            "✅ Successfully loaded model from: /content/drive/My Drive/labelee_checkpoints/best_model.pth\n",
            "\n",
            "🔄 PHASE 3: Loading test dataset...\n",
            "✅ Successfully loaded test dataset from: test_dataset.pth\n",
            "Using dataset with 438 samples\n",
            "\n",
            "🔄 PHASE 4: Running comprehensive evaluation...\n",
            "Starting comprehensive model evaluation...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Generating Embeddings:   0%|          | 0/14 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5d309642ca774cea836e63ab16c2adc3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "================================================================================\n",
            "COMPREHENSIVE RETRIEVAL EVALUATION RESULTS\n",
            "================================================================================\n",
            "\n",
            "📸➡️📝 IMAGE-TO-TEXT RETRIEVAL:\n",
            "----------------------------------------\n",
            "    Recall@1: 1.0000\n",
            " Precision@1: 1.0000\n",
            "    Recall@3: 1.0000\n",
            " Precision@3: 1.0000\n",
            "    Recall@5: 1.0000\n",
            " Precision@5: 1.0000\n",
            "   Recall@10: 1.0000\n",
            "Precision@10: 1.0000\n",
            "         MRR: 1.0000\n",
            "         MAP: 1.0000\n",
            "      NDCG@1: 1.0000\n",
            "      NDCG@3: 1.0000\n",
            "      NDCG@5: 1.0000\n",
            "     NDCG@10: 1.0000\n",
            "\n",
            "📝➡️📸 TEXT-TO-IMAGE RETRIEVAL:\n",
            "----------------------------------------\n",
            "    Recall@1: 1.0000\n",
            " Precision@1: 1.0000\n",
            "    Recall@3: 1.0000\n",
            " Precision@3: 1.0000\n",
            "    Recall@5: 1.0000\n",
            " Precision@5: 1.0000\n",
            "   Recall@10: 1.0000\n",
            "Precision@10: 1.0000\n",
            "         MRR: 1.0000\n",
            "         MAP: 1.0000\n",
            "      NDCG@1: 1.0000\n",
            "      NDCG@3: 1.0000\n",
            "      NDCG@5: 1.0000\n",
            "     NDCG@10: 1.0000\n",
            "\n",
            "🎯 OVERALL PERFORMANCE SUMMARY:\n",
            "----------------------------------------\n",
            "Avg Recall@1: 1.0000\n",
            "Avg Recall@5: 1.0000\n",
            "     Avg MRR: 1.0000\n",
            "\n",
            "📊 PERFORMANCE ANALYSIS:\n",
            "----------------------------------------\n",
            "🎉 EXCELLENT: Model shows strong cross-modal understanding!\n",
            "================================================================================\n",
            "\n",
            "💾 Results saved to: evaluation_results.json\n",
            "\n",
            "🎊 Evaluation completed successfully!\n",
            "\n",
            "✨ Evaluation Summary:\n",
            "Average Recall@1: 1.0000\n",
            "Average Recall@5: 1.0000\n",
            "Average MRR: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =========================================================\n",
        "# DIAGNOSTIC SCRIPT 2: DEEP INSPECTION\n",
        "# =========================================================\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader, Dataset, Subset\n",
        "from transformers import AutoTokenizer\n",
        "import torchvision.transforms as transforms\n",
        "from PIL import Image\n",
        "import requests\n",
        "import pandas as pd\n",
        "from datasets import load_dataset\n",
        "from tqdm.auto import tqdm\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# We must have the class definitions to load the model and datasets\n",
        "# (Copying them here for a self-contained script)\n",
        "class ECommerceDataset(Dataset):\n",
        "    def __init__(self, dataframe, tokenizer, transforms): self.dataframe, self.tokenizer, self.transforms = dataframe, tokenizer, transforms\n",
        "    def __len__(self): return len(self.dataframe)\n",
        "    def __getitem__(self, idx):\n",
        "        row = self.dataframe.iloc[idx]\n",
        "        try:\n",
        "            image_url, text = row['images_x'], row['product_title'] + \". \" + row['description']\n",
        "            image = Image.open(requests.get(image_url, stream=True, timeout=10).raw).convert(\"RGB\")\n",
        "            pixel_values = self.transforms(image)\n",
        "            tokenized_text = self.tokenizer(text, padding=\"max_length\", truncation=True, max_length=128, return_tensors=\"pt\")\n",
        "            return {'pixel_values': pixel_values, 'input_ids': tokenized_text['input_ids'].squeeze(), 'attention_mask': tokenized_text['attention_mask'].squeeze(), 'original_image_url': image_url, 'original_title': row['product_title']}\n",
        "        except Exception as e: return self.__getitem__((idx + 1) % len(self))\n",
        "# (Assuming the other model classes like LabeleeFoundation are defined above in your notebook)\n",
        "\n",
        "\n",
        "# --- 1. SETUP ---\n",
        "print(\"🔍 Deep Inspection Analysis Started...\")\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# --- 2. LOAD MODEL AND TOKENIZER ---\n",
        "print(\"Loading model and tokenizer...\")\n",
        "model = LabeleeFoundation()\n",
        "model.to(device)\n",
        "try:\n",
        "    model.load_state_dict(torch.load('/content/drive/My Drive/labelee_checkpoints/best_model.pth', map_location=device))\n",
        "    model.eval()\n",
        "except Exception as e:\n",
        "    raise RuntimeError(f\"Could not load the model. Ensure training was run first. Error: {e}\")\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')\n",
        "image_transforms = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])\n",
        "\n",
        "# --- 3. LOAD AND SPLIT THE DATA (with de-duplication) ---\n",
        "print(\"Loading and splitting data...\")\n",
        "ds = load_dataset(\"Hamzaizhappy786/Hybrid-E-Commerce_Product\", split='train')\n",
        "df = ds.to_pandas()\n",
        "# Apply the robust de-duplication strategy here for our analysis\n",
        "df.drop_duplicates(subset=['images_x', 'product_title'], inplace=True, keep='first')\n",
        "df = df.reset_index(drop=True)\n",
        "\n",
        "full_dataset = ECommerceDataset(df, tokenizer, image_transforms)\n",
        "\n",
        "# Re-create the exact same split as your training script for consistency\n",
        "generator = torch.Generator().manual_seed(42)\n",
        "train_subset, val_subset, test_subset = torch.utils.data.random_split(full_dataset, [0.8, 0.1, 0.1], generator=generator)\n",
        "\n",
        "train_loader = DataLoader(train_subset, batch_size=32, shuffle=False)\n",
        "test_loader = DataLoader(test_subset, batch_size=32, shuffle=False)\n",
        "print(f\"Using {len(train_subset)} training samples and {len(test_subset)} test samples.\")\n",
        "\n",
        "# --- 4. GENERATE ALL TRAINING EMBEDDINGS ---\n",
        "print(\"\\nGenerating embeddings for the ENTIRE training set... (This may take a minute)\")\n",
        "all_train_vision_embeds = []\n",
        "all_train_text_embeds = []\n",
        "with torch.no_grad():\n",
        "    for batch in tqdm(train_loader, desc=\"Training Set Embeddings\"):\n",
        "        vision_proj, text_proj = model(batch['pixel_values'].to(device), batch['input_ids'].to(device), batch['attention_mask'].to(device), task='contrastive')\n",
        "        all_train_vision_embeds.append(F.normalize(vision_proj.cpu()))\n",
        "        all_train_text_embeds.append(F.normalize(text_proj.cpu()))\n",
        "\n",
        "train_vision_embeddings = torch.cat(all_train_vision_embeds)\n",
        "train_text_embeddings = torch.cat(all_train_text_embeds)\n",
        "print(\"✅ Training embeddings generated.\")\n",
        "\n",
        "# --- 5. TAKE ONE TEST SAMPLE AND SEARCH FOR IT IN THE TRAINING SET ---\n",
        "print(\"\\nTaking one sample from the test set to search for its twin...\")\n",
        "test_sample_batch = next(iter(test_loader))\n",
        "test_sample = {k: v[0:1] for k, v in test_sample_batch.items()} # Take the very first item\n",
        "\n",
        "# Get the test sample's embeddings\n",
        "with torch.no_grad():\n",
        "    test_vision_embed, test_text_embed = model(test_sample['pixel_values'].to(device), test_sample['input_ids'].to(device), test_sample['attention_mask'].to(device), task='contrastive')\n",
        "    test_vision_embed = F.normalize(test_vision_embed.cpu())\n",
        "\n",
        "# --- 6. CALCULATE SIMILARITY AND FIND TOP MATCHES ---\n",
        "# Calculate cosine similarity between the test image and ALL training images\n",
        "similarities = test_vision_embed @ train_vision_embeddings.T\n",
        "top_5_scores, top_5_indices = torch.topk(similarities.squeeze(0), 5)\n",
        "\n",
        "print(\"\\n--- RESULTS ---\")\n",
        "print(\"We took the following image from the TEST SET:\")\n",
        "\n",
        "# Display the test image\n",
        "test_img_url = test_sample['original_image_url'][0]\n",
        "test_title = test_sample['original_title'][0]\n",
        "try:\n",
        "    image = Image.open(requests.get(test_img_url, stream=True).raw)\n",
        "    plt.imshow(image)\n",
        "    plt.title(f\"TEST SAMPLE:\\n{test_title[:50]}...\", wrap=True)\n",
        "    plt.axis('off')\n",
        "    plt.show()\n",
        "except Exception as e:\n",
        "    print(f\"Could not load test image: {e}\")\n",
        "\n",
        "print(\"\\nThese are its Top 5 most similar images from the TRAINING SET:\")\n",
        "\n",
        "# Display the top 5 training images\n",
        "fig, axes = plt.subplots(1, 5, figsize=(20, 5))\n",
        "for i in range(5):\n",
        "    match_index_in_subset = top_5_indices[i].item()\n",
        "    original_df_index = train_subset.indices[match_index_in_subset]\n",
        "    match_row = df.iloc[original_df_index]\n",
        "\n",
        "    match_img_url = match_row['images_x']\n",
        "    match_title = match_row['product_title']\n",
        "    similarity_score = top_5_scores[i].item()\n",
        "\n",
        "    try:\n",
        "        image = Image.open(requests.get(match_img_url, stream=True).raw)\n",
        "        axes[i].imshow(image)\n",
        "        axes[i].set_title(f\"MATCH #{i+1} (Sim: {similarity_score:.4f})\\n{match_title[:40]}...\", fontsize=10, wrap=True)\n",
        "        axes[i].axis('off')\n",
        "    except Exception as e:\n",
        "        axes[i].set_title(f\"MATCH #{i+1} (Image Failed to Load)\")\n",
        "        axes[i].axis('off')\n",
        "        print(f\"Could not load training image match: {e}\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\n--- ANALYSIS ---\")\n",
        "print(\"If the #1 match is IDENTICAL to the test sample, you have confirmed data leakage from near-duplicates.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "33ef8098d26b421b9bc22177d5386b52",
            "310de5bebdfe4283bfca5865a9a4fe5f",
            "f4b04fe596944c32a22c285b27a88b73",
            "2b8c885238e94421af14558ad208511f",
            "61b0b7f46aac41eb8adcc9e5f4b84349",
            "241ed7f5e63a474cb0de77dd7381aee8",
            "fce0b682b2f14cb3b7cc1c2c3669ada7",
            "1aadc8a495d04bfca5871304a6651141",
            "235da79f15b74f3ead2cfe8a5b647cd5",
            "c29d948943e644cfaa5eb793eb24e18d",
            "1a81ad86e7cd49b399850d21bcffb4ac"
          ]
        },
        "id": "Kh05AkgbM00f",
        "outputId": "5a79c327-732a-4cd6-8b6b-5044bd645363"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Deep Inspection Analysis Started...\n",
            "Loading model and tokenizer...\n",
            "Loading and splitting data...\n",
            "Using 3502 training samples and 437 test samples.\n",
            "\n",
            "Generating embeddings for the ENTIRE training set... (This may take a minute)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Training Set Embeddings:   0%|          | 0/110 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "33ef8098d26b421b9bc22177d5386b52"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Training embeddings generated.\n",
            "\n",
            "Taking one sample from the test set to search for its twin...\n",
            "\n",
            "--- RESULTS ---\n",
            "We took the following image from the TEST SET:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "These are its Top 5 most similar images from the TRAINING SET:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- ANALYSIS ---\n",
            "If the #1 match is IDENTICAL to the test sample, you have confirmed data leakage from near-duplicates.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =========================================================\n",
        "# DIAGNOSTIC SCRIPT 3: VECTOR & MATRIX INSPECTION\n",
        "# =========================================================\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import DataLoader\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# We assume your model (`LabeleeFoundation`) and dataset (`ECommerceDataset`, `test_dataset.pth`)\n",
        "# are already loaded and defined from the previous scripts/cells.\n",
        "\n",
        "print(\"🔍 Vector and Matrix Inspection Analysis Started...\")\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model.to(device)\n",
        "model.eval()\n",
        "\n",
        "# Use the test_loader you already created. If it's not in memory, recreate it.\n",
        "try:\n",
        "    test_loader\n",
        "except NameError:\n",
        "    print(\"Recreating test_loader...\")\n",
        "    test_dataset = torch.load('test_dataset.pth')\n",
        "    test_loader = DataLoader(test_dataset, batch_size=32)\n",
        "\n",
        "# --- 1. VECTOR COMPARISON (SINGLE SAMPLE) ---\n",
        "print(\"\\n--- CHECK 1: COMPARING A SINGLE VISION vs. TEXT VECTOR ---\")\n",
        "# Get a single batch\n",
        "batch = next(iter(test_loader))\n",
        "images = batch['pixel_values'].to(device)\n",
        "input_ids = batch['input_ids'].to(device)\n",
        "attention_mask = batch['attention_mask'].to(device)\n",
        "\n",
        "# Get model outputs\n",
        "with torch.no_grad():\n",
        "    vision_proj, text_proj = model(images, input_ids, attention_mask, task='contrastive')\n",
        "\n",
        "# Take the very first vector from the batch\n",
        "first_vision_vec = vision_proj[0]\n",
        "first_text_vec = text_proj[0]\n",
        "\n",
        "# Calculate the difference\n",
        "mse = F.mse_loss(first_vision_vec, first_text_vec).item()\n",
        "\n",
        "print(f\"First 10 values of VISION vector: {np.round(first_vision_vec.cpu().numpy()[:10], 4)}\")\n",
        "print(f\"First 10 values of TEXT   vector: {np.round(first_text_vec.cpu().numpy()[:10], 4)}\")\n",
        "print(\"-\" * 50)\n",
        "print(f\"Mean Squared Error (MSE) between the two vectors: {mse:.8f}\")\n",
        "print(\"-\" * 50)\n",
        "\n",
        "if mse < 1e-6:\n",
        "    print(\"🚨🚨🚨 HYPOTHESIS CONFIRMED: The vision and text vectors are identical!\")\n",
        "else:\n",
        "    print(\"✅ The vision and text vectors are distinct.\")\n",
        "\n",
        "\n",
        "# --- 2. SIMILARITY MATRIX VISUALIZATION (ONE BATCH) ---\n",
        "print(\"\\n--- CHECK 2: VISUALIZING THE SIMILARITY MATRIX ---\")\n",
        "\n",
        "# Normalize the batch of embeddings\n",
        "vision_proj_norm = F.normalize(vision_proj)\n",
        "text_proj_norm = F.normalize(text_proj)\n",
        "\n",
        "# Calculate the similarity matrix (Image-to-Text)\n",
        "similarity_matrix = vision_proj_norm @ text_proj_norm.T\n",
        "\n",
        "# Visualize the matrix as a heatmap\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.imshow(similarity_matrix.cpu().numpy(), cmap='viridis')\n",
        "plt.title(\"Similarity Matrix (Image-to-Text)\")\n",
        "plt.xlabel(\"Text Samples\")\n",
        "plt.ylabel(\"Image Samples\")\n",
        "plt.colorbar()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\n--- ANALYSIS ---\")\n",
        "print(\"If you see a bright, sharp diagonal line from top-left to bottom-right,\")\n",
        "print(\"it confirms that the strongest match for every image `i` is its own text `i`.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 982
        },
        "id": "qhLDZl1CjPBV",
        "outputId": "68eaf819-b051-4edf-e9f8-87564690c5b0"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Vector and Matrix Inspection Analysis Started...\n",
            "\n",
            "--- CHECK 1: COMPARING A SINGLE VISION vs. TEXT VECTOR ---\n",
            "First 10 values of VISION vector: [-0.3514 -0.1843  0.5212  0.4533 -0.0687  0.3467 -0.1931  0.0545  0.2771\n",
            " -0.3273]\n",
            "First 10 values of TEXT   vector: [-0.3984 -0.3376  0.2627  0.0094  0.1602  0.162  -0.4376  0.2536  0.3598\n",
            " -0.1578]\n",
            "--------------------------------------------------\n",
            "Mean Squared Error (MSE) between the two vectors: 0.06273537\n",
            "--------------------------------------------------\n",
            "✅ The vision and text vectors are distinct.\n",
            "\n",
            "--- CHECK 2: VISUALIZING THE SIMILARITY MATRIX ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- ANALYSIS ---\n",
            "If you see a bright, sharp diagonal line from top-left to bottom-right,\n",
            "it confirms that the strongest match for every image `i` is its own text `i`.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ==============================================================================\n",
        "# ROBUST GITHUB PUSH SCRIPT - FIXES DIRECTORY ISSUES\n",
        "# ==============================================================================\n",
        "\n",
        "import os\n",
        "import subprocess\n",
        "import shutil\n",
        "from pathlib import Path\n",
        "\n",
        "# --- 1. FIX WORKING DIRECTORY ISSUES ---\n",
        "print(\"🔧 Fixing working directory issues...\")\n",
        "\n",
        "# Navigate to a safe directory first\n",
        "os.chdir('/content')\n",
        "print(f\"Current directory: {os.getcwd()}\")\n",
        "\n",
        "# --- 2. AUTHENTICATION SETUP ---\n",
        "from google.colab import userdata\n",
        "\n",
        "try:\n",
        "    GIT_PAT = userdata.get('GITHUB_PAT')\n",
        "except userdata.SecretNotFoundError:\n",
        "    raise RuntimeError(\"Secret 'GITHUB_PAT' not found. Please add it to Colab Secrets.\")\n",
        "\n",
        "# Repository configuration\n",
        "GIT_USERNAME = \"theimma1\"\n",
        "GIT_REPO = \"labelee-foundation-model\"\n",
        "GIT_EMAIL = \"olliez30@icloud.com\"\n",
        "\n",
        "# --- 3. ENSURE GOOGLE DRIVE ACCESS ---\n",
        "from google.colab import drive\n",
        "if not os.path.exists('/content/drive'):\n",
        "    drive.mount('/content/drive')\n",
        "print(\"✅ Google Drive accessible\")\n",
        "\n",
        "# --- 4. LOCATE SOURCE FILES ---\n",
        "print(\"🔍 Locating source files...\")\n",
        "\n",
        "drive_checkpoint_dir = \"/content/drive/My Drive/labelee_checkpoints\"\n",
        "source_files = {}\n",
        "\n",
        "if os.path.exists(drive_checkpoint_dir):\n",
        "    for filename in os.listdir(drive_checkpoint_dir):\n",
        "        filepath = os.path.join(drive_checkpoint_dir, filename)\n",
        "        if os.path.isfile(filepath):\n",
        "            size_mb = os.path.getsize(filepath) / (1024*1024)\n",
        "            source_files[filename] = filepath\n",
        "            print(f\"✅ Found: {filename} ({size_mb:.1f}MB)\")\n",
        "else:\n",
        "    print(f\"❌ Directory not found: {drive_checkpoint_dir}\")\n",
        "    exit()\n",
        "\n",
        "if not source_files:\n",
        "    print(\"❌ No files found to upload!\")\n",
        "    exit()\n",
        "\n",
        "# --- 5. CLEAN SETUP ---\n",
        "repo_dir = f\"/content/{GIT_REPO}_upload\"\n",
        "\n",
        "# Remove any existing directory\n",
        "if os.path.exists(repo_dir):\n",
        "    shutil.rmtree(repo_dir)\n",
        "\n",
        "# --- 6. CLONE REPOSITORY USING SUBPROCESS ---\n",
        "print(f\"\\n📥 Cloning repository to: {repo_dir}\")\n",
        "\n",
        "repo_url = f\"https://{GIT_USERNAME}:{GIT_PAT}@github.com/{GIT_USERNAME}/{GIT_REPO}.git\"\n",
        "\n",
        "try:\n",
        "    # Use subprocess instead of shell commands\n",
        "    result = subprocess.run(\n",
        "        ['git', 'clone', repo_url, repo_dir],\n",
        "        cwd='/content',\n",
        "        capture_output=True,\n",
        "        text=True,\n",
        "        timeout=60\n",
        "    )\n",
        "\n",
        "    if result.returncode != 0:\n",
        "        print(f\"❌ Clone failed: {result.stderr}\")\n",
        "        # Try without username in URL\n",
        "        alt_url = f\"https://{GIT_PAT}@github.com/{GIT_USERNAME}/{GIT_REPO}.git\"\n",
        "        result = subprocess.run(\n",
        "            ['git', 'clone', alt_url, repo_dir],\n",
        "            cwd='/content',\n",
        "            capture_output=True,\n",
        "            text=True,\n",
        "            timeout=60\n",
        "        )\n",
        "\n",
        "        if result.returncode != 0:\n",
        "            print(f\"❌ Alternative clone also failed: {result.stderr}\")\n",
        "            exit()\n",
        "\n",
        "    print(\"✅ Repository cloned successfully\")\n",
        "\n",
        "except subprocess.TimeoutExpired:\n",
        "    print(\"❌ Clone operation timed out\")\n",
        "    exit()\n",
        "except Exception as e:\n",
        "    print(f\"❌ Clone error: {e}\")\n",
        "    exit()\n",
        "\n",
        "# --- 7. VERIFY CLONE SUCCESS ---\n",
        "if not os.path.exists(repo_dir):\n",
        "    print(f\"❌ Repository directory not created: {repo_dir}\")\n",
        "    exit()\n",
        "\n",
        "# Change to repo directory\n",
        "os.chdir(repo_dir)\n",
        "print(f\"✅ Changed to directory: {os.getcwd()}\")\n",
        "\n",
        "# --- 8. SETUP GIT LFS ---\n",
        "print(\"\\n🔧 Setting up Git LFS...\")\n",
        "\n",
        "try:\n",
        "    # Install LFS\n",
        "    subprocess.run(['git', 'lfs', 'install'], cwd=repo_dir, check=True)\n",
        "\n",
        "    # Track .pth files\n",
        "    subprocess.run(['git', 'lfs', 'track', '*.pth'], cwd=repo_dir, check=True)\n",
        "\n",
        "    print(\"✅ Git LFS configured\")\n",
        "except subprocess.CalledProcessError as e:\n",
        "    print(f\"⚠️ LFS setup warning: {e}\")\n",
        "\n",
        "# --- 9. CREATE DIRECTORY STRUCTURE ---\n",
        "print(\"\\n📁 Creating directory structure...\")\n",
        "\n",
        "directories = ['checkpoints', 'results', 'logs', 'data']\n",
        "for dir_name in directories:\n",
        "    dir_path = os.path.join(repo_dir, dir_name)\n",
        "    os.makedirs(dir_path, exist_ok=True)\n",
        "    print(f\"✅ Created: {dir_name}/\")\n",
        "\n",
        "# --- 10. COPY FILES ---\n",
        "print(\"\\n📋 Copying files from Google Drive...\")\n",
        "\n",
        "copied_files = []\n",
        "for filename, source_path in source_files.items():\n",
        "    # Determine destination\n",
        "    if filename.endswith('.pth'):\n",
        "        dest_dir = 'checkpoints'\n",
        "    elif filename.endswith('.json'):\n",
        "        dest_dir = 'results'\n",
        "    elif filename.endswith('.csv'):\n",
        "        dest_dir = 'data'\n",
        "    else:\n",
        "        dest_dir = 'logs'\n",
        "\n",
        "    dest_path = os.path.join(repo_dir, dest_dir, filename)\n",
        "\n",
        "    try:\n",
        "        print(f\"  Copying {filename}...\")\n",
        "        shutil.copy2(source_path, dest_path)\n",
        "\n",
        "        if os.path.exists(dest_path):\n",
        "            size_mb = os.path.getsize(dest_path) / (1024*1024)\n",
        "            copied_files.append(os.path.join(dest_dir, filename))\n",
        "            print(f\"  ✅ {filename} ({size_mb:.1f}MB)\")\n",
        "        else:\n",
        "            print(f\"  ❌ Copy verification failed for {filename}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"  ❌ Failed to copy {filename}: {e}\")\n",
        "\n",
        "print(f\"\\n📊 Successfully copied {len(copied_files)} files\")\n",
        "\n",
        "if not copied_files:\n",
        "    print(\"❌ No files were copied successfully!\")\n",
        "    exit()\n",
        "\n",
        "# --- 11. GIT OPERATIONS ---\n",
        "print(\"\\n🔧 Configuring Git...\")\n",
        "\n",
        "try:\n",
        "    # Configure git user\n",
        "    subprocess.run(['git', 'config', 'user.email', GIT_EMAIL], cwd=repo_dir, check=True)\n",
        "    subprocess.run(['git', 'config', 'user.name', GIT_USERNAME], cwd=repo_dir, check=True)\n",
        "\n",
        "    # Add files\n",
        "    print(\"📝 Adding files...\")\n",
        "    subprocess.run(['git', 'add', '.'], cwd=repo_dir, check=True)\n",
        "\n",
        "    # Check status\n",
        "    result = subprocess.run(['git', 'status', '--porcelain'], cwd=repo_dir, capture_output=True, text=True)\n",
        "    if result.stdout.strip():\n",
        "        print(\"📝 Files to commit:\")\n",
        "        for line in result.stdout.strip().split('\\n')[:10]:  # Show first 10 files\n",
        "            print(f\"   {line}\")\n",
        "    else:\n",
        "        print(\"⚠️ No changes detected to commit\")\n",
        "        exit()\n",
        "\n",
        "    # Commit\n",
        "    from datetime import datetime\n",
        "    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n",
        "    commit_msg = f\"Add model checkpoints from Colab - {timestamp}\"\n",
        "\n",
        "    print(f\"💾 Committing: {commit_msg}\")\n",
        "    subprocess.run(['git', 'commit', '-m', commit_msg], cwd=repo_dir, check=True)\n",
        "\n",
        "    # Push\n",
        "    print(\"🚀 Pushing to GitHub...\")\n",
        "    result = subprocess.run(['git', 'push', 'origin', 'main'], cwd=repo_dir, capture_output=True, text=True)\n",
        "\n",
        "    if result.returncode == 0:\n",
        "        print(\"✅ Push successful!\")\n",
        "    else:\n",
        "        print(f\"❌ Push failed: {result.stderr}\")\n",
        "        # Try alternative branch name\n",
        "        print(\"🔄 Trying 'master' branch...\")\n",
        "        result = subprocess.run(['git', 'push', 'origin', 'master'], cwd=repo_dir, capture_output=True, text=True)\n",
        "\n",
        "        if result.returncode == 0:\n",
        "            print(\"✅ Push to master successful!\")\n",
        "        else:\n",
        "            print(f\"❌ Push to master also failed: {result.stderr}\")\n",
        "            exit()\n",
        "\n",
        "except subprocess.CalledProcessError as e:\n",
        "    print(f\"❌ Git operation failed: {e}\")\n",
        "    exit()\n",
        "\n",
        "# --- 12. SUCCESS MESSAGE ---\n",
        "print(\"\\n\" + \"=\"*60)\n",
        "print(\"🎉 SUCCESS! Files uploaded to GitHub!\")\n",
        "print(f\"📁 Repository: https://github.com/{GIT_USERNAME}/{GIT_REPO}\")\n",
        "print(f\"📊 Files uploaded ({len(copied_files)}):\")\n",
        "for file_path in copied_files:\n",
        "    print(f\"   ✅ {file_path}\")\n",
        "print(\"=\"*60)\n",
        "\n",
        "# --- 13. CLEANUP ---\n",
        "os.chdir('/content')\n",
        "print(f\"\\n🧹 Returned to: {os.getcwd()}\")\n",
        "\n",
        "print(\"\\n🔗 View your repository at:\")\n",
        "print(f\"   https://github.com/{GIT_USERNAME}/{GIT_REPO}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Egb3MUcb709y",
        "outputId": "05186c30-f928-4366-cfb8-1ade80d3484d"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔧 Fixing working directory issues...\n",
            "Current directory: /content\n",
            "✅ Google Drive accessible\n",
            "🔍 Locating source files...\n",
            "✅ Found: best_model.pth (722.9MB)\n",
            "✅ Found: latest_checkpoint.pth (2152.3MB)\n",
            "\n",
            "📥 Cloning repository to: /content/labelee-foundation-model_upload\n",
            "✅ Repository cloned successfully\n",
            "✅ Changed to directory: /content/labelee-foundation-model_upload\n",
            "\n",
            "🔧 Setting up Git LFS...\n",
            "✅ Git LFS configured\n",
            "\n",
            "📁 Creating directory structure...\n",
            "✅ Created: checkpoints/\n",
            "✅ Created: results/\n",
            "✅ Created: logs/\n",
            "✅ Created: data/\n",
            "\n",
            "📋 Copying files from Google Drive...\n",
            "  Copying best_model.pth...\n",
            "  ✅ best_model.pth (722.9MB)\n",
            "  Copying latest_checkpoint.pth...\n",
            "  ✅ latest_checkpoint.pth (2152.3MB)\n",
            "\n",
            "📊 Successfully copied 2 files\n",
            "\n",
            "🔧 Configuring Git...\n",
            "📝 Adding files...\n",
            "📝 Files to commit:\n",
            "   A  .gitattributes\n",
            "💾 Committing: Add model checkpoints from Colab - 2025-06-26 06:53\n",
            "🚀 Pushing to GitHub...\n",
            "✅ Push successful!\n",
            "\n",
            "============================================================\n",
            "🎉 SUCCESS! Files uploaded to GitHub!\n",
            "📁 Repository: https://github.com/theimma1/labelee-foundation-model\n",
            "📊 Files uploaded (2):\n",
            "   ✅ checkpoints/best_model.pth\n",
            "   ✅ checkpoints/latest_checkpoint.pth\n",
            "============================================================\n",
            "\n",
            "🧹 Returned to: /content\n",
            "\n",
            "🔗 View your repository at:\n",
            "   https://github.com/theimma1/labelee-foundation-model\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xaFGKCWWEci7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}